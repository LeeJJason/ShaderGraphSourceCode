%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!48 &4800000
Shader:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_Name: Fresnel
  m_Script: "Shader \"Graph/FresnelFromSGraph\" \n{\n\tProperties \n\t{\n\t\tFresnelColor(\"FresnelColor\",
    Color) = (0,1,1,0)\n\t\tPower(\"\", Vector) = (2.96,0,0,0)\n\t\tMetal(\"\", 2D)
    = \"white\" {}\n\n\t}\t\n\t\n\tSubShader \n\t{\n\t\tTags {\r\n\t\t\t\"RenderType\"=\"Opaque\"\r\n\t\t\t\"Queue\"=\"Geometry\"\r\n\t\t}\r\n\n\t\tBlend
    One Zero\r\n\n\t\tCull Back\r\n\n\t\tZTest LEqual\r\n\n\t\tZWrite On\r\n\n\n\t\tLOD
    200\n\t\t\n\t\t\n\t// ------------------------------------------------------------\n\t//
    Surface shader code generated out of a CGPROGRAM block:\n\t\n\n\t// ---- forward
    rendering base pass:\n\tPass {\n\t\tName \"FORWARD\"\n\t\tTags { \"LightMode\"
    = \"ForwardBase\" }\n\nGpuProgramID 43742\nTags { \"ShadowSupport\" = \"True\"
    }\nProgram \"vp\" {}\nProgram \"fp\" {}\n\n#LINE 264\n\n\n}\n\n\t// ---- forward
    rendering additive lights pass:\n\tPass {\n\t\tName \"FORWARD\"\n\t\tTags { \"LightMode\"
    = \"ForwardAdd\" }\n\t\tZWrite Off Blend One One\n\nGpuProgramID 65895\nProgram
    \"vp\" {}\nProgram \"fp\" {}\n\n#LINE 168\n\n\n}\n\n\t// ---- deferred shading
    pass:\n\tPass {\n\t\tName \"DEFERRED\"\n\t\tTags { \"LightMode\" = \"Deferred\"
    }\n\nGpuProgramID 133405\nProgram \"vp\" {}\nProgram \"fp\" {}\n\n#LINE 238\n\n\n}\n\n\t//
    ---- meta information extraction pass:\n\tPass {\n\t\tName \"Meta\"\n\t\tTags
    { \"LightMode\" = \"Meta\" }\n\t\tCull Off\n\nGpuProgramID 250938\nProgram \"vp\"
    {}\nProgram \"fp\" {}\n\n#LINE 152\n\n\n}\n\n\t// ---- end of surface shader generated
    code\n\n#LINE 93\n\n\t} \n\tFallBack \"Diffuse\"\n}\n"
  m_PathName: 
  decompressedSize: 0
  m_SubProgramBlob: 
  m_Dependencies:
  - {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
  - {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
  m_ShaderIsBaked: 0
  errors: []
  m_DefaultTextures:
    Metal: {fileID: 0}
  m_CompileInfo:
    m_Snippets:
      426:
        m_Code: "#line 36 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelPower;\r\n\t\tfloat4
          FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_538590 = half4 (2.32, 0, 0, 0);\r\n\t\t\t// Subgraph for node SubGraph_10210\r\n\t\t\tfloat4
          SubGraph_10210_I00 = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O01 = V4Node_538590;\r\n\t\t\t\thalf4
          FresnelNode_10170_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      2027:
        m_Code: "#line 36 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      2554:
        m_Code: "#line 37 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7614\r\n\t\t\tfloat4 SubGraph_7614_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7628_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7628_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7636_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7642_Output = SubGraphInputs_7628_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7644_Output
          = unity_absolute_half (SplatNode_7642_Output);\r\n\t\t\t\thalf4 PowerNode_7640_Output
          = pow (FresnelNode_7636_Output, AbsoluteNode_7644_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7638_Output = unity_multiply_half (SubGraphInputs_7628_O00,
          PowerNode_7640_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7614_I00 = MultiplyNode_7638_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7616_Output = unity_multiply_half
          (SubGraph_7614_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7616_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      13266:
        m_Code: "#line 37 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          YES\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\t// Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00
          = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4
          FresnelNode_7466_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_7474_Output = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4
          PowerNode_7470_Output = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\tfloat4 Texture_10260_Output
          = tex2D (Metal, IN.meshUV0.xy);\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\t\t\to.Metallic
          = Texture_10260_Output;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x
          = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3
          worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir
          = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      23956:
        m_Code: "#line 36 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7466_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7474_Output
          = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4 PowerNode_7470_Output
          = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      33073:
        m_Code: "#line 36 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4 Power;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid vert
          (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      33459:
        m_Code: "#line 84 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 84
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n#pragma
          vertex vert\n#pragma fragment frag\n#pragma multi_compile_shadowcaster\n#include
          \"UnityCG.cginc\"\n\nstruct v2f { \n\tV2F_SHADOW_CASTER;\n};\n\nv2f vert(
          appdata_base v )\n{\n\tv2f o;\n\tTRANSFER_SHADOW_CASTER_NORMALOFFSET(o)\n\treturn
          o;\n}\n\nfloat4 frag( v2f i ) : SV_Target\n{\n\tSHADOW_CASTER_FRAGMENT(i)\n}\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 62b6c5a316baf972049cec0f0fafee4c
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - SHADOWS_DEPTH
        - - SHADOWS_CUBE
        m_VariantsBuiltin1:
        - - SHADOWS_DEPTH
        - - SHADOWS_CUBE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: SHADOWS_CUBE SHADOWS_DEPTH
      43742:
        m_Code: "#line 37 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7594\r\n\t\t\tfloat4 SubGraph_7594_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7600_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7600_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7608_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7614_Output = SubGraphInputs_7600_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7616_Output
          = unity_absolute_half (SplatNode_7614_Output);\r\n\t\t\t\thalf4 PowerNode_7612_Output
          = pow (FresnelNode_7608_Output, AbsoluteNode_7616_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7610_Output = unity_multiply_half (SubGraphInputs_7600_O00,
          PowerNode_7612_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7594_I00 = MultiplyNode_7610_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7596_Output = unity_multiply_half
          (SubGraph_7594_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7596_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      43837:
        m_Code: "#line 36 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_fresnel_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn (1.0 - dot (normalize (arg1.xyz),
          normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half
          (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4
          FresnelPower;\r\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          MultiplyNode_10224_Output = unity_multiply_half (FresnelPower, half4 (1,1,1,1));\r\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = MultiplyNode_10224_Output;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.zzzz;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      50705:
        m_Code: "#line 35 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdbase\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          25 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = half4 (1,1,1,1);\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh
          = 0;\n      #elif (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ fixed3 viewDir = worldViewDir;\n  surfIN.viewDir = viewDir;\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      52877:
        m_Code: "#line 18 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_fog\n#pragma multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\n//
          no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n
          \ float2 pack0 : TEXCOORD0; // _MainTex\n  half3 worldNormal : TEXCOORD1;\n
          \ float3 worldPos : TEXCOORD2;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  float2 pack0 : TEXCOORD0; // _MainTex\n  half3 worldNormal
          : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  #ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef LIGHTMAP_OFF\n  o.lmap.xy
          = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  #endif\n\n
          \ // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if UNITY_SHOULD_SAMPLE_SH\n
          \     #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n        o.sh = 0;\n      #elif
          (SHADER_TARGET < 30)\n        o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \     #else\n        o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n      #endif\n
          \     // Add approximated illumination from non-important point lights\n
          \     #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n          unity_4LightPosX0,
          unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n    #endif\n
          \ #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x = 1.0;\n
          \ surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n  #ifndef
          USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n
          \ o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.atten = atten;\n
          \ #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingLambert_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingLambert (o, gi);\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: d5cdd6649495743462fecd3cc51161fd
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      65895:
        m_Code: "#line 272 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7594\r\n\t\t\tfloat4 SubGraph_7594_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7600_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7600_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7608_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7614_Output = SubGraphInputs_7600_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7616_Output
          = unity_absolute_half (SplatNode_7614_Output);\r\n\t\t\t\thalf4 PowerNode_7612_Output
          = pow (FresnelNode_7608_Output, AbsoluteNode_7616_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7610_Output = unity_multiply_half (SubGraphInputs_7600_O00,
          PowerNode_7612_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7594_I00 = MultiplyNode_7610_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7596_Output = unity_multiply_half
          (SubGraph_7594_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7596_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      68436:
        m_Code: "#line 284 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          no\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\t// Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00
          = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4
          FresnelNode_7466_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_7474_Output = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4
          PowerNode_7470_Output = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\tfloat4 Texture_10260_Output
          = tex2D (Metal, IN.meshUV0.xy);\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\t\t\to.Metallic
          = Texture_10260_Output;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates to pixel
          shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel
          shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      76863:
        m_Code: "#line 270 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      80122:
        m_Code: "#line 271 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelPower;\r\n\t\tfloat4
          FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_538590 = half4 (2.32, 0, 0, 0);\r\n\t\t\t// Subgraph for node SubGraph_10210\r\n\t\t\tfloat4
          SubGraph_10210_I00 = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O01 = V4Node_538590;\r\n\t\t\t\thalf4
          FresnelNode_10170_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      84002:
        m_Code: "#line 271 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_fresnel_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn (1.0 - dot (normalize (arg1.xyz),
          normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half
          (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4
          FresnelPower;\r\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          MultiplyNode_10224_Output = unity_multiply_half (FresnelPower, half4 (1,1,1,1));\r\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = MultiplyNode_10224_Output;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.zzzz;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      85859:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// ES2.0/WebGL/3DS can not
          do loops with non-constant-expression iteration counts :(\n#if defined(SHADER_API_GLES)\n
          \ #define LIGHT_LOOP_LIMIT 8\n#elif defined(SHADER_API_N3DS)\n  #define
          LIGHT_LOOP_LIMIT 4\n#else\n  #define LIGHT_LOOP_LIMIT unity_VertexLightParams.x\n#endif\n#define
          ENABLE_SPECULAR (!defined(SHADER_API_N3DS))\n\n// Compile specialized variants
          for when positional (point/spot) and spot lights are present\n#pragma multi_compile
          __ POINT SPOT\n\n// Compute illumination from one light, given attenuation\nhalf3
          computeLighting (int idx, half3 dirToLight, half3 eyeNormal, half3 viewDir,
          half4 diffuseColor, half shininess, half atten, inout half3 specColor) {\n
          \ half NdotL = max(dot(eyeNormal, dirToLight), 0.0);\n  // diffuse\n  half3
          color = NdotL * diffuseColor.rgb * unity_LightColor[idx].rgb;\n  // specular\n
          \ if (NdotL > 0.0) {\n    half3 h = normalize(dirToLight + viewDir);\n    half
          HdotN = max(dot(eyeNormal, h), 0.0);\n    half sp = saturate(pow(HdotN,
          shininess));\n    specColor += (atten * sp) * unity_LightColor[idx].rgb;\n
          \ }\n  return color * atten;\n}\n\n// Compute attenuation & illumination
          from one light\nhalf3 computeOneLight(int idx, float3 eyePosition, half3
          eyeNormal, half3 viewDir, half4 diffuseColor, half shininess, inout half3
          specColor) {\n  float3 dirToLight = unity_LightPosition[idx].xyz;\n  half
          att = 1.0;\n  #if defined(POINT) || defined(SPOT)\n    dirToLight -= eyePosition
          * unity_LightPosition[idx].w;\n    // distance attenuation\n    float distSqr
          = dot(dirToLight, dirToLight);\n    att /= (1.0 + unity_LightAtten[idx].z
          * distSqr);\n    if (unity_LightPosition[idx].w != 0 && distSqr > unity_LightAtten[idx].w)
          att = 0.0; // set to 0 if outside of range\n    dirToLight *= rsqrt(distSqr);\n
          \   #if defined(SPOT)\n      // spot angle attenuation\n      half rho =
          max(dot(dirToLight, unity_SpotDirection[idx].xyz), 0.0);\n      half spotAtt
          = (rho - unity_LightAtten[idx].x) * unity_LightAtten[idx].y;\n      att
          *= saturate(spotAtt);\n    #endif\n  #endif\n  att *= 0.5; // passed in
          light colors are 2x brighter than what used to be in FFP\n  return min (computeLighting
          (idx, dirToLight, eyeNormal, viewDir, diffuseColor, shininess, att, specColor),
          1.0);\n}\n\n// uniforms\nhalf4 _Color;\nhalf4 _SpecColor;\nhalf4 _Emission;\nhalf
          _Shininess;\nint4 unity_VertexLightParams; // x: light count, y: zero, z:
          one (y/z needed by d3d9 vs loop instruction)\nfloat4 _MainTex_ST;\n\n//
          vertex shader input data\nstruct appdata {\n  float3 pos : POSITION;\n  float3
          normal : NORMAL;\n  float3 uv0 : TEXCOORD0;\n};\n\n// vertex-to-fragment
          interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n  #if ENABLE_SPECULAR\n
          \ fixed3 specColor : COLOR1;\n  #endif\n  float2 uv0 : TEXCOORD0;\n  #if
          USING_FOG\n    fixed fog : TEXCOORD1;\n  #endif\n  float4 pos : SV_POSITION;\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          eyeNormal = normalize (mul ((float3x3)UNITY_MATRIX_IT_MV, IN.normal).xyz);\n
          \ half3 viewDir = 0.0;\n  viewDir = -normalize (eyePos);\n  // lighting\n
          \ half3 lcolor = _Emission.rgb + _Color.rgb * glstate_lightmodel_ambient.rgb;\n
          \ half3 specColor = 0.0;\n  half shininess = _Shininess * 128.0;\n  for
          (int il = 0; il < LIGHT_LOOP_LIMIT; ++il) {\n    lcolor += computeOneLight(il,
          eyePos, eyeNormal, viewDir, _Color, shininess, specColor);\n  }\n  color.rgb
          = lcolor.rgb;\n  color.a = _Color.a;\n  specColor *= _SpecColor.rgb;\n  o.color
          = saturate(color);\n  #if ENABLE_SPECULAR\n  o.specColor = saturate(specColor);\n
          \ #endif\n  // compute texture coordinates\n  o.uv0 = IN.uv0.xy * _MainTex_ST.xy
          + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float fogCoord = length(eyePos.xyz);
          // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n    o.fog
          = saturate(unityFogFactor);\n  #endif\n  // transform position\n  o.pos
          = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n// textures\nsampler2D
          _MainTex;\n\n// fragment shader\nfixed4 frag (v2f IN) : SV_Target {\n  fixed4
          col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n  // SetTexture #0\n  tex = tex2D
          (_MainTex, IN.uv0.xy);\n  col.rgb = tex * IN.color;\n  col *= 2;\n  col.a
          = fixed4(1,1,1,1).a;\n  #if ENABLE_SPECULAR\n  // add specular color\n  col.rgb
          += IN.specColor;\n  #endif\n  // fog\n  #if USING_FOG\n    col.rgb = lerp
          (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n  return col;\n}\n\n//
          texenvs\n//! TexEnv0: 02010103 01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR POINT SPOT
        m_BuiltinKeywords: 
      92238:
        m_Code: "#line 205 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_fog\n#pragma multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float2 pack0 : TEXCOORD0; //
          _MainTex\n  half3 worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n
          \ SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\nfloat4 _MainTex_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n
          \ o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x = 1.0;\n
          \ surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n  #ifndef
          USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n
          \ o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  gi.light.color *= atten;\n
          \ c += LightingLambert (o, gi);\n  c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: d5cdd6649495743462fecd3cc51161fd
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      95587:
        m_Code: "#line 272 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7614\r\n\t\t\tfloat4 SubGraph_7614_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7628_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7628_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7636_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7642_Output = SubGraphInputs_7628_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7644_Output
          = unity_absolute_half (SplatNode_7642_Output);\r\n\t\t\t\thalf4 PowerNode_7640_Output
          = pow (FresnelNode_7636_Output, AbsoluteNode_7644_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7638_Output = unity_multiply_half (SubGraphInputs_7628_O00,
          PowerNode_7640_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7614_I00 = MultiplyNode_7638_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7616_Output = unity_multiply_half
          (SubGraph_7614_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7616_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      98233:
        m_Code: "#line 268 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          25 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = half4 (1,1,1,1);\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      117029:
        m_Code: "#line 270 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7466_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7474_Output
          = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4 PowerNode_7470_Output
          = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      128175:
        m_Code: "#line 235 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma multi_compile_fwdadd\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          26 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4 Power;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid vert
          (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 52f816656dafeebcd2f4a2a9b873fb23
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      133405:
        m_Code: "#line 175 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 27
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7594\r\n\t\t\tfloat4 SubGraph_7594_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7600_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7600_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7608_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7614_Output = SubGraphInputs_7600_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7616_Output
          = unity_absolute_half (SplatNode_7614_Output);\r\n\t\t\t\thalf4 PowerNode_7612_Output
          = pow (FresnelNode_7608_Output, AbsoluteNode_7616_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7610_Output = unity_multiply_half (SubGraphInputs_7600_O00,
          PowerNode_7612_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7594_I00 = MultiplyNode_7610_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7596_Output = unity_multiply_half
          (SubGraph_7594_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7596_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      145839:
        m_Code: "#line 186 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          YES\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 27
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\t// Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00
          = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4
          FresnelNode_7466_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_7474_Output = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4
          PowerNode_7470_Output = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\tfloat4 Texture_10260_Output
          = tex2D (Metal, IN.meshUV0.xy);\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\t\t\to.Metallic
          = Texture_10260_Output;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  half3 viewDir : TEXCOORD3;\n  float4 lmap : TEXCOORD4;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD5; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD6;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);\n
          \ o.viewDir = viewDirForLight;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n
          \     o.sh = 0;\n    #elif (SHADER_TARGET < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \   #else\n      o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n
          \ #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      145863:
        m_Code: "#line 173 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      150368:
        m_Code: "#line 171 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 25
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = half4 (1,1,1,1);\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      153633:
        m_Code: "#line 175 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 27
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7614\r\n\t\t\tfloat4 SubGraph_7614_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7628_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7628_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7636_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7642_Output = SubGraphInputs_7628_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7644_Output
          = unity_absolute_half (SplatNode_7642_Output);\r\n\t\t\t\thalf4 PowerNode_7640_Output
          = pow (FresnelNode_7636_Output, AbsoluteNode_7644_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7638_Output = unity_multiply_half (SubGraphInputs_7628_O00,
          PowerNode_7640_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7614_I00 = MultiplyNode_7638_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7616_Output = unity_multiply_half
          (SubGraph_7614_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7616_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      155416:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\nfloat4 _MainTex_ST;\n\n//
          vertex shader input data\nstruct appdata {\n  float3 pos : POSITION;\n  float3
          uv1 : TEXCOORD1;\n  float3 uv0 : TEXCOORD0;\n};\n\n// vertex-to-fragment
          interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n  float2 uv0 : TEXCOORD0;\n
          \ float2 uv1 : TEXCOORD1;\n  #if USING_FOG\n    fixed fog : TEXCOORD2;\n
          \ #endif\n  float4 pos : SV_POSITION;\n};\n\n// vertex shader\nv2f vert
          (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n  float3 eyePos
          = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3 viewDir = 0.0;\n
          \ o.color = saturate(color);\n  // compute texture coordinates\n  o.uv0
          = IN.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  o.uv1 = IN.uv0.xy
          * _MainTex_ST.xy + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float
          fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n//
          textures\nsampler2D _MainTex;\nfixed4 _Color;\n\n// fragment shader\nfixed4
          frag (v2f IN) : SV_Target {\n  fixed4 col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n
          \ // SetTexture #0\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap, IN.uv0.xy);\n
          \ col = tex * _Color;\n  // SetTexture #1\n  tex = tex2D (_MainTex, IN.uv1.xy);\n
          \ col.rgb = tex * col;\n  col *= 2;\n  col.a = fixed4(1,1,1,1).a;\n  //
          fog\n  #if USING_FOG\n    col.rgb = lerp (unity_FogColor.rgb, col.rgb, IN.fog);\n
          \ #endif\n  return col;\n}\n\n// texenvs\n//! TexEnv0: 01010102 01010102
          [unity_Lightmap] [_Color] usesLightmapST\n//! TexEnv1: 02010100 01060004
          [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
      161489:
        m_Code: "#line 111 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_PREPASSBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef
          USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n
          \ o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // output normal and
          specular\n  fixed4 res;\n  res.rgb = o.Normal * 0.5 + 0.5;\n  res.a = o.Specular;\n
          \ return res;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: fe12428b5e57f88e6ce01dadfe0e2a5c
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      161602:
        m_Code: "#line 174 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_fresnel_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn (1.0 - dot (normalize (arg1.xyz),
          normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half
          (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4
          FresnelPower;\r\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          MultiplyNode_10224_Output = unity_multiply_half (FresnelPower, half4 (1,1,1,1));\r\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = MultiplyNode_10224_Output;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.zzzz;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      170532:
        m_Code: "#line 174 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelPower;\r\n\t\tfloat4
          FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_538590 = half4 (2.32, 0, 0, 0);\r\n\t\t\t// Subgraph for node SubGraph_10210\r\n\t\t\tfloat4
          SubGraph_10210_I00 = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O01 = V4Node_538590;\r\n\t\t\t\thalf4
          FresnelNode_10170_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      190981:
        m_Code: "#line 141 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4 Power;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid vert
          (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n#ifndef
          DIRLIGHTMAP_OFF\n  half3 viewDir : TEXCOORD2;\n#endif\n  float4 lmap : TEXCOORD3;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD5;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  #ifndef DIRLIGHTMAP_OFF\n  o.viewDir
          = viewDirForLight;\n  #endif\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw =
          v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n
          \     o.sh = 0;\n    #elif (SHADER_TARGET < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \   #else\n      o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n
          \ #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.color.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      193348:
        m_Code: "#line 173 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7466_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7474_Output
          = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4 PowerNode_7470_Output
          = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if
          UNITY_SAMPLE_FULL_SH_PER_PIXEL\n      o.sh = 0;\n    #elif (SHADER_TARGET
          < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n    #else\n      o.sh
          = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n  #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294957635
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 2c7234fa40cfa808fb7c88dc6135c609
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      198654:
        m_Code: "#line 244 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      200775:
        m_Code: "#line 90 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_fog\n#pragma multi_compile_prepassfinal\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_PREPASSFINAL\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float2 pack0 : TEXCOORD0; //
          _MainTex\n  float3 worldPos : TEXCOORD1;\n  float4 screen : TEXCOORD2;\n
          \ float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n  float3 vlight : TEXCOORD4;\n#else\n#ifdef
          DIRLIGHTMAP_OFF\n  float4 lmapFadePos : TEXCOORD4;\n#endif\n#endif\n  UNITY_FOG_COORDS(5)\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2 :
          TEXCOORD8;\n  #endif\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.screen = ComputeScreenPos (o.pos);\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  float3 worldN = UnityObjectToWorldNormal(v.normal);\n
          \ o.vlight = ShadeSH9 (float4(worldN,1.0));\n#endif\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\nsampler2D _LightBuffer;\n#if
          defined (SHADER_API_XBOX360) && defined (UNITY_HDR_ON)\nsampler2D _LightSpecBuffer;\n#endif\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  half4 light = tex2Dproj (_LightBuffer,
          UNITY_PROJ_COORD(IN.screen));\n#if defined (SHADER_API_MOBILE)\n  light
          = max(light, half4(0.001, 0.001, 0.001, 0.001));\n#endif\n#ifndef UNITY_HDR_ON\n
          \ light = -log2(light);\n#endif\n#if defined (SHADER_API_XBOX360) && defined
          (UNITY_HDR_ON)\n  light.w = tex2Dproj (_LightSpecBuffer, UNITY_PROJ_COORD(IN.screen)).r;\n#endif\n
          \ #ifndef LIGHTMAP_OFF\n    #ifdef DIRLIGHTMAP_OFF\n      // single lightmap\n
          \     fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);\n      fixed3
          lm = DecodeLightmap (lmtex);\n      light.rgb += lm;\n    #elif DIRLIGHTMAP_COMBINED\n
          \     // directional lightmaps\n      fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap,
          IN.lmap.xy);\n      half4 lm = half4(DecodeLightmap(lmtex), 0);\n      light
          += lm;\n    #elif DIRLIGHTMAP_SEPARATE\n      // directional with specular
          - no support\n    #endif // DIRLIGHTMAP_OFF\n  #else\n    light.rgb += IN.vlight;\n
          \ #endif // !LIGHTMAP_OFF\n\n  #ifndef DYNAMICLIGHTMAP_OFF\n  fixed4 dynlmtex
          = UNITY_SAMPLE_TEX2D(unity_DynamicLightmap, IN.lmap.zw);\n  light.rgb +=
          DecodeRealtimeLightmap (dynlmtex);\n  #endif\n\n  half4 c = LightingLambert_PrePass
          (o, light);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: fe12428b5e57f88e6ce01dadfe0e2a5c
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      206067:
        m_Code: "#line 246 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 27
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7614\r\n\t\t\tfloat4 SubGraph_7614_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7628_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7628_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7636_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7642_Output = SubGraphInputs_7628_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7644_Output
          = unity_absolute_half (SplatNode_7642_Output);\r\n\t\t\t\thalf4 PowerNode_7640_Output
          = pow (FresnelNode_7636_Output, AbsoluteNode_7644_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7638_Output = unity_multiply_half (SubGraphInputs_7628_O00,
          PowerNode_7640_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7614_I00 = MultiplyNode_7638_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7616_Output = unity_multiply_half
          (SubGraph_7614_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7616_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      209575:
        m_Code: "#line 214 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4 Power;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid vert
          (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float3 worldPos : TEXCOORD0;\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      214433:
        m_Code: "#line 257 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          27 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\t// Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00
          = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4
          FresnelNode_7466_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_7474_Output = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4
          PowerNode_7470_Output = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\tfloat4 Texture_10260_Output
          = tex2D (Metal, IN.meshUV0.xy);\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\t\t\to.Metallic
          = Texture_10260_Output;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      215955:
        m_Code: "#line 245 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelPower;\r\n\t\tfloat4
          FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_538590 = half4 (2.32, 0, 0, 0);\r\n\t\t\t// Subgraph for node SubGraph_10210\r\n\t\t\tfloat4
          SubGraph_10210_I00 = float4(0, 0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00
          = FresnelColor;\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O01 = V4Node_538590;\r\n\t\t\t\thalf4
          FresnelNode_10170_Output = unity_fresnel_half (float4 (IN.viewDir, 1), half4
          (o.Normal, 1));\r\n\t\t\t\thalf4 SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      220785:
        m_Code: "#line 242 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 25
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = half4 (1,1,1,1);\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.xxxx;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      246303:
        m_Code: "#line 244 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7452\r\n\t\t\tfloat4 SubGraph_7452_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7458_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7458_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7466_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7472_Output = SubGraphInputs_7458_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7474_Output
          = unity_absolute_half (SplatNode_7472_Output);\r\n\t\t\t\thalf4 PowerNode_7470_Output
          = pow (FresnelNode_7466_Output, AbsoluteNode_7474_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7468_Output = unity_multiply_half (SubGraphInputs_7458_O00,
          PowerNode_7470_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7452_I00 = MultiplyNode_7468_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7454_Output = unity_multiply_half
          (SubGraph_7452_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7454_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      249241:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\nfloat4 unity_Lightmap_ST;\nfloat4
          _MainTex_ST;\n\n// vertex shader input data\nstruct appdata {\n  float3
          pos : POSITION;\n  float3 uv1 : TEXCOORD1;\n  float3 uv0 : TEXCOORD0;\n};\n\n//
          vertex-to-fragment interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n
          \ float2 uv0 : TEXCOORD0;\n  float2 uv1 : TEXCOORD1;\n  float2 uv2 : TEXCOORD2;\n
          \ #if USING_FOG\n    fixed fog : TEXCOORD3;\n  #endif\n  float4 pos : SV_POSITION;\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          viewDir = 0.0;\n  o.color = saturate(color);\n  // compute texture coordinates\n
          \ o.uv0 = IN.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  o.uv1
          = IN.uv1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n  o.uv2 = IN.uv0.xy
          * _MainTex_ST.xy + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float
          fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n//
          textures\nsampler2D _MainTex;\nfixed4 _Color;\n\n// fragment shader\nfixed4
          frag (v2f IN) : SV_Target {\n  fixed4 col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n
          \ // SetTexture #0\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap, IN.uv0.xy);\n
          \ col = tex * tex.a;\n  col *= 2;\n  // SetTexture #1\n  tex = UNITY_SAMPLE_TEX2D
          (unity_Lightmap, IN.uv1.xy);\n  col = col * _Color;\n  // SetTexture #2\n
          \ tex = tex2D (_MainTex, IN.uv2.xy);\n  col.rgb = tex * col;\n  col *= 4;\n
          \ col.a = fixed4(1,1,1,1).a;\n  // fog\n  #if USING_FOG\n    col.rgb = lerp
          (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n  return col;\n}\n\n//
          texenvs\n//! TexEnv0: 02010105 02010105 [unity_Lightmap] usesLightmapST\n//!
          TexEnv1: 01000102 01000102 [unity_Lightmap] [_Color]\n//! TexEnv2: 04010100
          01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
      250938:
        m_Code: "#line 246 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 27
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_fresnel_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          (1.0 - dot (normalize (arg1.xyz), normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_absolute_half (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4 FresnelColor;\r\n\t\tfloat4
          Power;\r\n\t\tsampler2D Metal;\r\n\t\tfloat4 Metal_ST;\r\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\t//
          Subgraph for node SubGraph_7594\r\n\t\t\tfloat4 SubGraph_7594_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_7600_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_7600_O01 = Power;\r\n\t\t\t\thalf4 FresnelNode_7608_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_7614_Output = SubGraphInputs_7600_O01.xxxx;\r\n\t\t\t\thalf4 AbsoluteNode_7616_Output
          = unity_absolute_half (SplatNode_7614_Output);\r\n\t\t\t\thalf4 PowerNode_7612_Output
          = pow (FresnelNode_7608_Output, AbsoluteNode_7616_Output);\r\n\t\t\t\thalf4
          MultiplyNode_7610_Output = unity_multiply_half (SubGraphInputs_7600_O00,
          PowerNode_7612_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_7594_I00 = MultiplyNode_7610_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_7596_Output = unity_multiply_half
          (SubGraph_7594_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_7596_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      254736:
        m_Code: "#line 245 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n#pragma target
          3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR FOG_EXP
          FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 26
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          exclude_renderers ps3 flash xbox360 gles d3d11 d3d11_9x\n\t\t//#pragma target
          3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_fresnel_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn (1.0 - dot (normalize (arg1.xyz),
          normalize (arg2.xyz))).xxxx;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half
          (half4 arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\n\n\t\tfloat4
          FresnelPower;\r\n\t\tfloat4 FresnelColor;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          MultiplyNode_10224_Output = unity_multiply_half (FresnelPower, half4 (1,1,1,1));\r\n\t\t\t//
          Subgraph for node SubGraph_10210\r\n\t\t\tfloat4 SubGraph_10210_I00 = float4(0,
          0, 0, 0);\r\n\t\t\t{\r\n\t\t\t\tfloat4 SubGraphInputs_10162_O00 = FresnelColor;\r\n\t\t\t\tfloat4
          SubGraphInputs_10162_O01 = MultiplyNode_10224_Output;\r\n\t\t\t\thalf4 FresnelNode_10170_Output
          = unity_fresnel_half (float4 (IN.viewDir, 1), half4 (o.Normal, 1));\r\n\t\t\t\thalf4
          SplatNode_10176_Output = SubGraphInputs_10162_O01.zzzz;\r\n\t\t\t\thalf4
          AbsoluteNode_10178_Output = unity_absolute_half (SplatNode_10176_Output);\r\n\t\t\t\thalf4
          PowerNode_10174_Output = pow (FresnelNode_10170_Output, AbsoluteNode_10178_Output);\r\n\t\t\t\thalf4
          MultiplyNode_10172_Output = unity_multiply_half (SubGraphInputs_10162_O00,
          PowerNode_10174_Output);\r\n\t\t\t\t\r\n\t\t\t\tSubGraph_10210_I00 = MultiplyNode_10172_Output;\r\n\t\t\t}\r\n\t\t\t//
          Subgraph ends\r\n\t\t\t\r\n\t\t\thalf4 MultiplyNode_10212_Output = unity_multiply_half
          (SubGraph_10210_I00, half4 (1,1,1,1));\r\n\t\t\to.Emission = MultiplyNode_10212_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/Graphs
        m_PlatformMask: 4294966851
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 41a6a35ec8e1e9a2ee891b8f0e5a5d1b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      275658:
        m_Code: "#line 171 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers nomrt\n#pragma multi_compile_prepassfinal\n#pragma skip_variants
          FOG_LINEAR FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: no\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_DEFERRED\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 8
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float2 pack0 : TEXCOORD0; //
          _MainTex\n  half3 worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n
          \ float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n
          \   float4 lmapFadePos : TEXCOORD5;\n  #endif\n#endif\n};\nfloat4 _MainTex_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n
          \ o.worldNormal = worldNormal;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n  #if UNITY_SHOULD_SAMPLE_SH\n    #if UNITY_SAMPLE_FULL_SH_PER_PIXEL\n
          \     o.sh = 0;\n    #elif (SHADER_TARGET < 30)\n      o.sh = ShadeSH9 (float4(worldNormal,1.0));\n
          \   #else\n      o.sh = ShadeSH3Order (half4(worldNormal, 1.0));\n    #endif\n
          \ #endif\n#endif\n  return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.atten
          = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingLambert_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingLambert_Deferred (o, gi, outDiffuse,
          outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n  outEmission.rgb
          = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: fe12428b5e57f88e6ce01dadfe0e2a5c
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      363371:
        m_Code: "#line 176 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  float2 pack0 : TEXCOORD0; // _MainTex\n  float3 worldPos
          : TEXCOORD1;\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n
          \ return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 303eac41cd1a911cf2ca0bc7508a99a6
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      1862807:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\n\n// vertex shader
          input data\nstruct appdata {\n  float3 pos : POSITION;\n  half4 color :
          COLOR;\n};\n\n// vertex-to-fragment interpolators\nstruct v2f {\n  fixed4
          color : COLOR0;\n  #if USING_FOG\n    fixed fog : TEXCOORD0;\n  #endif\n
          \ float4 pos : SV_POSITION;\n};\n\n// vertex shader\nv2f vert (appdata IN)
          {\n  v2f o;\n  half4 color = IN.color;\n  float3 eyePos = mul (UNITY_MATRIX_MV,
          float4(IN.pos,1)).xyz;\n  half3 viewDir = 0.0;\n  o.color = saturate(color);\n
          \ // compute texture coordinates\n  // fog\n  #if USING_FOG\n    float fogCoord
          = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag (v2f IN) : SV_Target {\n  fixed4 col;\n  col
          = IN.color;\n  // fog\n  #if USING_FOG\n    col.rgb = lerp (unity_FogColor.rgb,
          col.rgb, IN.fog);\n  #endif\n  return col;\n}\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
    m_MeshComponentsFromSnippets: 11
    m_HasSurfaceShaders: 1
    m_HasFixedFunctionShaders: 1
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ef5b9f0785847b04983f907c7f016a36, type: 3}
  m_Name: FresnelFromSGraph
  m_EditorClassIdentifier: 
  m_MaterialProperties: {fileID: 11400002}
  m_MaterialOptions: {fileID: 11400004}
  m_PixelGraph: {fileID: 11400006}
  m_Shader: {fileID: 4800000}
--- !u!114 &11400002
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: cab057dbd683f5244aed9bd721e1973e, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_ShaderProperties:
  - {fileID: 11400028}
  - {fileID: 11485774}
  - {fileID: 11433322}
  previewState: 0
--- !u!114 &11400004
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: edd99bcf0936ee84794c384dffae5501, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_SrcBlend: 0
  m_DstBlend: 1
  m_CullMode: 0
  m_ZTest: 2
  m_ZWrite: 0
  m_RenderQueue: 1
  m_RenderType: 0
  m_ShadowPass: 0
  m_FullForwardShadows: 0
  m_NoAmbient: 0
  m_NoVertexLights: 0
  m_NoLightmaps: 0
  m_NoDirLightmap: 0
  m_NoForwardAdd: 0
  m_ApproxView: 0
  m_HalfAsView: 0
--- !u!114 &11400006
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 226075d30f5b2694caa212aa3e968148, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  nodes:
  - {fileID: 11400022}
  - {fileID: 11400010}
  - {fileID: 11400012}
  - {fileID: 11490432}
  - {fileID: 0}
  edges:
  - m_FromNode: {fileID: 11400010}
    m_ToNode: {fileID: 11400012}
    m_FromSlotName: I00
    m_ToSlotName: Input0
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11400022}
    m_ToNode: {fileID: 11400010}
    m_FromSlotName: Color
    m_ToSlotName: O00
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11490432}
    m_ToNode: {fileID: 11400010}
    m_FromSlotName: Value
    m_ToSlotName: O01
    color: {r: 1, g: 1, b: 1, a: 1}
  m_InvalidEdges: []
--- !u!114 &11400010
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 047e0841c1476e041935baac6d7bb652, type: 3}
  m_Name: SubGraph
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Color
    m_Name: O00
    m_DataTypeString: 
  - type: 0
    m_Title: Power
    m_Name: O01
    m_DataTypeString: 
  - type: 1
    m_Title: I00
    m_Name: I00
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 168
    y: 60
    width: 213
    height: 85
  showEmptySlots: 1
  m_SlotDefaultValues:
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: O00
    m_Node: {fileID: 11400010}
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: O01
    m_Node: {fileID: 11400010}
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: I00
    m_Node: {fileID: 11400010}
  m_PrecisionNames:
  - half
  m_SubGraphAsset: {fileID: 11400000, guid: a003744971255eb418c9d90ad6a41b21, type: 2}
--- !u!114 &11400012
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 088fb5bde3ece0f4190136b3ab43f7c4, type: 3}
  m_Name: MultiplyNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  - type: 0
    m_Title: Input 0
    m_Name: Input0
    m_DataTypeString: 
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 456
    y: -60
    width: 74
    height: 129
  showEmptySlots: 1
  m_SlotDefaultValues:
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: Output
    m_Node: {fileID: 11400012}
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: Input0
    m_Node: {fileID: 11400012}
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: Input1
    m_Node: {fileID: 11400012}
  m_PrecisionNames:
  - half
--- !u!114 &11400022
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 325c0e24c20746345a5f90dc201973f8, type: 3}
  m_Name: ColorNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Color
    m_Name: Color
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 36
    y: -60
    width: 58
    height: 80
  showEmptySlots: 1
  m_SlotDefaultValues:
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: Color
    m_Node: {fileID: 11400022}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 11400028}
  m_Color: {r: 0, g: 1, b: 1, a: 0}
--- !u!114 &11400026
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 23780b49142426e44a26228feb560cda, type: 3}
  m_Name: FresnelPower
  m_EditorClassIdentifier: 
  m_PropertyDescription: FresnelPower
  m_DefaultVector: {x: 1.8, y: 0, z: 0, w: 0}
--- !u!114 &11400028
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: a50d0c305a31cc547a53206afda6204e, type: 3}
  m_Name: FresnelColor
  m_EditorClassIdentifier: 
  m_PropertyDescription: FresnelColor
  m_DefaultColor: {r: 0, g: 1, b: 1, a: 0}
--- !u!114 &11433322
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b793ff9211c8787428ec61378a5b39ac, type: 3}
  m_Name: Metal
  m_EditorClassIdentifier: 
  m_PropertyDescription: 
  m_DefaultTexture: {fileID: 0}
  m_DefaultTextureType: 0
--- !u!114 &11485774
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 23780b49142426e44a26228feb560cda, type: 3}
  m_Name: Power
  m_EditorClassIdentifier: 
  m_PropertyDescription: 
  m_DefaultVector: {x: 2.96, y: 0, z: 0, w: 0}
--- !u!114 &11490432
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f34a640000e664d4f8b2e0795df7fad9, type: 3}
  m_Name: V4Node
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Value
    m_Name: Value
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -144
    y: 60
    width: 178
    height: 80
  showEmptySlots: 1
  m_SlotDefaultValues:
  - m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
    m_Editable: 1
    m_SlotName: Value
    m_Node: {fileID: 11490432}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 11485774}
  m_Value: {x: 2.96, y: 0, z: 0, w: 0}
