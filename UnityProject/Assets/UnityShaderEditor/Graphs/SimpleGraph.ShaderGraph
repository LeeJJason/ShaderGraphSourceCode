%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!48 &4819548
Shader:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_Name: SImple
  m_Script: "Shader \"Graph/SimpleGraph\" \n{\n\tProperties \n\t{\n\n\t}\t\n\t\n\tSubShader
    \n\t{\n\t\tTags {\r\n\t\t\t\"RenderType\"=\"Opaque\"\r\n\t\t\t\"Queue\"=\"Geometry\"\r\n\t\t}\r\n\n\t\tBlend
    One Zero\r\n\n\t\tCull Back\r\n\n\t\tZTest LEqual\r\n\n\t\tZWrite On\r\n\n\n\t\tLOD
    200\n\t\t\n\t\t\n\t// ------------------------------------------------------------\n\t//
    Surface shader code generated out of a CGPROGRAM block:\n\t\n\n\t// ---- forward
    rendering base pass:\n\tPass {\n\t\tName \"FORWARD\"\n\t\tTags { \"LightMode\"
    = \"ForwardBase\" }\n\nGpuProgramID 53988\nTags { \"ShadowSupport\" = \"True\"
    }\nProgram \"vp\" {}\nProgram \"fp\" {}\n\n#LINE 263\n\n\n}\n\n\t// ---- forward
    rendering additive lights pass:\n\tPass {\n\t\tName \"FORWARD\"\n\t\tTags { \"LightMode\"
    = \"ForwardAdd\" }\n\t\tZWrite Off Blend One One\n\nGpuProgramID 106561\nProgram
    \"vp\" {}\nProgram \"fp\" {}\n\n#LINE 171\n\n\n}\n\n\t// ---- deferred shading
    pass:\n\tPass {\n\t\tName \"DEFERRED\"\n\t\tTags { \"LightMode\" = \"Deferred\"
    }\n\nGpuProgramID 135485\nProgram \"vp\" {}\nProgram \"fp\" {}\n\n#LINE 236\n\n\n}\n\n\t//
    ---- meta information extraction pass:\n\tPass {\n\t\tName \"Meta\"\n\t\tTags
    { \"LightMode\" = \"Meta\" }\n\t\tCull Off\n\nGpuProgramID 259008\nProgram \"vp\"
    {}\nProgram \"fp\" {}\n\n#LINE 155\n\n\n}\n\n\t// ---- end of surface shader generated
    code\n\n#LINE 90\n\n\t} \n\tFallBack \"Diffuse\"\n}\n"
  m_PathName: 
  decompressedSize: 0
  m_SubProgramBlob: 
  m_Dependencies:
  - {fileID: 7, guid: 0000000000000000f000000000000000, type: 0}
  - {fileID: 6, guid: 0000000000000000f000000000000000, type: 0}
  m_ShaderIsBaked: 0
  errors: []
  m_DefaultTextures: {}
  m_CompileInfo:
    m_Snippets:
      4842:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      5370:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      6689:
        m_Code: "#line 18 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_fog\n#pragma multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\n//
          no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n
          \ float2 pack0 : TEXCOORD0; // _MainTex\n  half3 worldNormal : TEXCOORD1;\n
          \ float3 worldPos : TEXCOORD2;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  float2 pack0 : TEXCOORD0; // _MainTex\n  half3 worldNormal
          : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  #ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef LIGHTMAP_OFF\n  o.lmap.xy
          = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  #endif\n\n
          \ // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if UNITY_SHOULD_SAMPLE_SH\n
          \     o.sh = 0;\n      // Approximated illumination from non-important point
          lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh += Shade4PointLights (\n
          \         unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,\n          unity_LightColor[0].rgb,
          unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n
          \         unity_4LightAtten0, worldPos, worldNormal);\n      #endif\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n
          \ TRANSFER_SHADOW(o); // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x
          = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n
          \ o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // compute lighting
          & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4
          c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.atten = atten;\n
          \ #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingLambert_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingLambert (o, gi);\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4bfbbd6980368a896ce4a989e9594553
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      21016:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      21409:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.02;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0.2827587, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      33459:
        m_Code: "#line 84 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 84
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n#pragma
          vertex vert\n#pragma fragment frag\n#pragma multi_compile_shadowcaster\n#include
          \"UnityCG.cginc\"\n\nstruct v2f { \n\tV2F_SHADOW_CASTER;\n};\n\nv2f vert(
          appdata_base v )\n{\n\tv2f o;\n\tTRANSFER_SHADOW_CASTER_NORMALOFFSET(o)\n\treturn
          o;\n}\n\nfloat4 frag( v2f i ) : SV_Target\n{\n\tSHADOW_CASTER_FRAGMENT(i)\n}\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: c4ae85c2481c323c60a84103d16fd47e
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - SHADOWS_DEPTH
        - - SHADOWS_CUBE
        m_VariantsBuiltin1:
        - - SHADOWS_DEPTH
        - - SHADOWS_CUBE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: SHADOWS_CUBE SHADOWS_DEPTH
      33745:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\thalf V1Node_249072_Uniform = 0;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      37373:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half4 unity_subtract_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_8434;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\tfloat4 Texture_8434_Output = tex2D (Texture_8434, IN.meshUV0.xy);\r\n\t\t\thalf4
          SubtractNode_8436_Output = unity_subtract_half (half4 (1,1,1,1), Texture_8434_Output);\r\n\t\t\thalf4
          V4Node_8432 = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = SubtractNode_8436_Output;\r\n\t\t\to.Smoothness
          = V4Node_8432;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation data\n//
          no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n
          \ half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4
          custompack0 : TEXCOORD2; // meshUV0\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3
          sh : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.meshUV0.x =
          1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n
          \ #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3
          worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: d3f70dfc264f6a5c1bfb608281d34001
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      37670:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.w);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      40226:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_8574_Uniform = half4 (0.1910855, 0.2282516, 0.2794301, 0.1098039);\r\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = ColorNode_8574_Uniform;\r\n\t\t\to.Smoothness
          = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh : TEXCOORD2; // SH\n
          \ #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n  #if SHADER_TARGET
          >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n// with lightmaps:\n#ifndef
          LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  float4 lmap : TEXCOORD2;\n
          \ SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1 : TEXCOORD6;\n  fixed3 tSpace2
          : TEXCOORD7;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      44852:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.67;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_244106_Uniform = half4
          (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output = unity_multiply_half
          (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment
          interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf
          {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3
          worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh : TEXCOORD2;
          // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n  #if SHADER_TARGET
          >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n// with lightmaps:\n#ifndef
          LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  float4 lmap : TEXCOORD2;\n
          \ SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1 : TEXCOORD6;\n  fixed3 tSpace2
          : TEXCOORD7;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      44858:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.67;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      50736:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// ES2.0/WebGL/3DS can not
          do loops with non-constant-expression iteration counts :(\n#if defined(SHADER_API_GLES)\n
          \ #define LIGHT_LOOP_LIMIT 8\n#elif defined(SHADER_API_N3DS)\n  #define
          LIGHT_LOOP_LIMIT 4\n#else\n  #define LIGHT_LOOP_LIMIT unity_VertexLightParams.x\n#endif\n#define
          ENABLE_SPECULAR (!defined(SHADER_API_N3DS))\n\n// Compile specialized variants
          for when positional (point/spot) and spot lights are present\n#pragma multi_compile
          __ POINT SPOT\n\n// Compute illumination from one light, given attenuation\nhalf3
          computeLighting (int idx, half3 dirToLight, half3 eyeNormal, half3 viewDir,
          half4 diffuseColor, half shininess, half atten, inout half3 specColor) {\n
          \ half NdotL = max(dot(eyeNormal, dirToLight), 0.0);\n  // diffuse\n  half3
          color = NdotL * diffuseColor.rgb * unity_LightColor[idx].rgb;\n  return
          color * atten;\n}\n\n// Compute attenuation & illumination from one light\nhalf3
          computeOneLight(int idx, float3 eyePosition, half3 eyeNormal, half3 viewDir,
          half4 diffuseColor, half shininess, inout half3 specColor) {\n  float3 dirToLight
          = unity_LightPosition[idx].xyz;\n  half att = 1.0;\n  #if defined(POINT)
          || defined(SPOT)\n    dirToLight -= eyePosition * unity_LightPosition[idx].w;\n
          \   // distance attenuation\n    float distSqr = dot(dirToLight, dirToLight);\n
          \   att /= (1.0 + unity_LightAtten[idx].z * distSqr);\n    if (unity_LightPosition[idx].w
          != 0 && distSqr > unity_LightAtten[idx].w) att = 0.0; // set to 0 if outside
          of range\n    dirToLight *= rsqrt(distSqr);\n    #if defined(SPOT)\n      //
          spot angle attenuation\n      half rho = max(dot(dirToLight, unity_SpotDirection[idx].xyz),
          0.0);\n      half spotAtt = (rho - unity_LightAtten[idx].x) * unity_LightAtten[idx].y;\n
          \     att *= saturate(spotAtt);\n    #endif\n  #endif\n  att *= 0.5; //
          passed in light colors are 2x brighter than what used to be in FFP\n  return
          min (computeLighting (idx, dirToLight, eyeNormal, viewDir, diffuseColor,
          shininess, att, specColor), 1.0);\n}\n\n// uniforms\nhalf4 _Color;\nint4
          unity_VertexLightParams; // x: light count, y: zero, z: one (y/z needed
          by d3d9 vs loop instruction)\nfloat4 _Dummy_ST;\n\n// vertex shader input
          data\nstruct appdata {\n  float3 pos : POSITION;\n  float3 normal : NORMAL;\n
          \ float3 uv0 : TEXCOORD0;\n};\n\n// vertex-to-fragment interpolators\nstruct
          v2f {\n  fixed4 color : COLOR0;\n  float2 uv0 : TEXCOORD0;\n  #if USING_FOG\n
          \   fixed fog : TEXCOORD1;\n  #endif\n  float4 pos : SV_POSITION;\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          eyeNormal = normalize (mul ((float3x3)UNITY_MATRIX_IT_MV, IN.normal).xyz);\n
          \ half3 viewDir = 0.0;\n  // lighting\n  half3 lcolor = half4(0,0,0,1).rgb
          + _Color.rgb * glstate_lightmodel_ambient.rgb;\n  half3 specColor = 0.0;\n
          \ half shininess = 0 * 128.0;\n  for (int il = 0; il < LIGHT_LOOP_LIMIT;
          ++il) {\n    lcolor += computeOneLight(il, eyePos, eyeNormal, viewDir, _Color,
          shininess, specColor);\n  }\n  color.rgb = lcolor.rgb;\n  color.a = _Color.a;\n
          \ o.color = saturate(color);\n  // compute texture coordinates\n  o.uv0
          = IN.uv0.xy * _Dummy_ST.xy + _Dummy_ST.zw;\n  // fog\n  #if USING_FOG\n
          \   float fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n//
          textures\nsampler2D _Dummy; // not in shader properties, assuming 2D\n\n//
          fragment shader\nfixed4 frag (v2f IN) : SV_Target {\n  fixed4 col;\n  fixed4
          tex, tmp0, tmp1, tmp2;\n  // SetTexture #0\n  tex = tex2D (_Dummy, IN.uv0.xy);\n
          \ col.rgb = IN.color;\n  col *= 2;\n  col.a = IN.color.a;\n  // fog\n  #if
          USING_FOG\n    col.rgb = lerp (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n
          \ return col;\n}\n\n// texenvs\n//! TexEnv0: 02030000 01070004 [_Dummy]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR POINT SPOT
        m_BuiltinKeywords: 
      53988:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.y);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      57333:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.x);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      59208:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half (half4
          arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          AbsoluteNode_251216_Output = unity_absolute_half (_SinTime);\r\n\t\t\thalf4
          MultiplyNode_243632_Output = unity_multiply_half (PowerNode_238842_Output,
          AbsoluteNode_251216_Output);\r\n\t\t\thalf V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf
          V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh : TEXCOORD2; // SH\n
          \ #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n  #if SHADER_TARGET
          >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n// with lightmaps:\n#ifndef
          LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  float4 lmap : TEXCOORD2;\n
          \ SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1 : TEXCOORD6;\n  fixed3 tSpace2
          : TEXCOORD7;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      62380:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_FORWARDBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.48;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.z);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4
          pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos
          : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \ half3 sh : TEXCOORD3; // SH\n  #endif\n  SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD6;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n  float4 lmap : TEXCOORD3;\n
          \ SHADOW_COORDS(4)\n  UNITY_FOG_COORDS(5)\n  #ifdef DIRLIGHTMAP_COMBINED\n
          \ fixed3 tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2
          : TEXCOORD8;\n  #endif\n};\n#endif\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n
          \ fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n\n  // compute lighting & shadowing factor\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // realtime lighting:
          call lighting function\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.rgb += o.Emission;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      63178:
        m_Code: "#line 34 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdbase\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDBASE\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Smoothness = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\n// no lightmaps:\n#ifdef LIGHTMAP_OFF\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  #if UNITY_SHOULD_SAMPLE_SH\n  half3 sh
          : TEXCOORD2; // SH\n  #endif\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #if SHADER_TARGET >= 30\n  float4 lmap : TEXCOORD5;\n  #endif\n};\n#endif\n//
          with lightmaps:\n#ifndef LIGHTMAP_OFF\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ float4 lmap : TEXCOORD2;\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n
          \ #ifdef DIRLIGHTMAP_COMBINED\n  fixed3 tSpace0 : TEXCOORD5;\n  fixed3 tSpace1
          : TEXCOORD6;\n  fixed3 tSpace2 : TEXCOORD7;\n  #endif\n};\n#endif\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n  fixed tangentSign
          = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3 worldBinormal =
          cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0 = float4(worldTangent.x, worldBinormal.x,
          worldNormal.x, worldPos.x);\n  o.tSpace1 = float4(worldTangent.y, worldBinormal.y,
          worldNormal.y, worldPos.y);\n  o.tSpace2 = float4(worldTangent.z, worldBinormal.z,
          worldNormal.z, worldPos.z);\n  #endif\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  #ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy
          * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n  #endif\n  #ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #endif\n\n  // SH/ambient and vertex lights\n  #ifdef LIGHTMAP_OFF\n    #if
          UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      // Approximated illumination
          from non-important point lights\n      #ifdef VERTEXLIGHT_ON\n        o.sh
          += Shade4PointLights (\n          unity_4LightPosX0, unity_4LightPosY0,
          unity_4LightPosZ0,\n          unity_LightColor[0].rgb, unity_LightColor[1].rgb,
          unity_LightColor[2].rgb, unity_LightColor[3].rgb,\n          unity_4LightAtten0,
          worldPos, worldNormal);\n      #endif\n      o.sh = ShadeSHPerVertex (worldNormal,
          o.sh);\n    #endif\n  #endif // LIGHTMAP_OFF\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n\n  // compute lighting & shadowing factor\n
          \ UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n  fixed4 c = 0;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ // Call GI (lightmaps/SH/reflections) lighting function\n  UnityGIInput
          giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n  giInput.light
          = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir = worldViewDir;\n
          \ giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n
          \   giInput.lightmapUV = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n
          \ #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n    giInput.ambient = IN.sh;\n  #else\n
          \   giInput.ambient.rgb = 0.0;\n  #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n
          \ giInput.probeHDR[1] = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING
          || UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMin[0] = unity_SpecCube0_BoxMin;
          // .w holds lerp value for blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMax[0] = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0]
          = unity_SpecCube0_ProbePosition;\n    giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n
          \   giInput.boxMin[1] = unity_SpecCube1_BoxMin;\n    giInput.probePosition[1]
          = unity_SpecCube1_ProbePosition;\n  #endif\n  LightingStandard_GI(o, giInput,
          gi);\n\n  // realtime lighting: call lighting function\n  c += LightingStandard
          (o, worldViewDir, gi);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n
          \ UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
          - VERTEXLIGHT_ON
        m_VariantsBuiltin1:
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_OFF
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        - - DIRECTIONAL
          - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - SHADOWS_SCREEN
          - SHADOWS_NATIVE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON LIGHTMAP_OFF LIGHTMAP_ON SHADOWS_NATIVE
          SHADOWS_OFF SHADOWS_SCREEN VERTEXLIGHT_ON
      66985:
        m_Code: "#line 250 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      67694:
        m_Code: "#line 271 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.w);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates to pixel
          shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel
          shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      79369:
        m_Code: "#line 200 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_fog\n#pragma multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float2 pack0 : TEXCOORD0; //
          _MainTex\n  half3 worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n
          \ SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\nfloat4 _MainTex_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n
          \ o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates
          to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates
          to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.uv_MainTex.x = 1.0;\n
          \ surfIN.uv_MainTex = IN.pack0.xy;\n  float3 worldPos = IN.worldPos;\n  #ifndef
          USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n
          \ o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  gi.light.color *= atten;\n
          \ c += LightingLambert (o, gi);\n  c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4bfbbd6980368a896ce4a989e9594553
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      82756:
        m_Code: "#line 243 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half4 unity_subtract_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_8434;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\tfloat4 Texture_8434_Output = tex2D (Texture_8434, IN.meshUV0.xy);\r\n\t\t\thalf4
          SubtractNode_8436_Output = unity_subtract_half (half4 (1,1,1,1), Texture_8434_Output);\r\n\t\t\thalf4
          V4Node_8432 = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = SubtractNode_8436_Output;\r\n\t\t\to.Smoothness
          = V4Node_8432;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n
          \ SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates to pixel
          shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel
          shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten,
          IN, worldPos)\n  fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n      gi.light.color
          = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n      gi.light.ndotl
          = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n  gi.light.color *= atten;\n
          \ c += LightingStandard (o, worldViewDir, gi);\n  c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord,
          c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n  return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: d3f70dfc264f6a5c1bfb608281d34001
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      85859:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// ES2.0/WebGL/3DS can not
          do loops with non-constant-expression iteration counts :(\n#if defined(SHADER_API_GLES)\n
          \ #define LIGHT_LOOP_LIMIT 8\n#elif defined(SHADER_API_N3DS)\n  #define
          LIGHT_LOOP_LIMIT 4\n#else\n  #define LIGHT_LOOP_LIMIT unity_VertexLightParams.x\n#endif\n#define
          ENABLE_SPECULAR (!defined(SHADER_API_N3DS))\n\n// Compile specialized variants
          for when positional (point/spot) and spot lights are present\n#pragma multi_compile
          __ POINT SPOT\n\n// Compute illumination from one light, given attenuation\nhalf3
          computeLighting (int idx, half3 dirToLight, half3 eyeNormal, half3 viewDir,
          half4 diffuseColor, half shininess, half atten, inout half3 specColor) {\n
          \ half NdotL = max(dot(eyeNormal, dirToLight), 0.0);\n  // diffuse\n  half3
          color = NdotL * diffuseColor.rgb * unity_LightColor[idx].rgb;\n  // specular\n
          \ if (NdotL > 0.0) {\n    half3 h = normalize(dirToLight + viewDir);\n    half
          HdotN = max(dot(eyeNormal, h), 0.0);\n    half sp = saturate(pow(HdotN,
          shininess));\n    specColor += (atten * sp) * unity_LightColor[idx].rgb;\n
          \ }\n  return color * atten;\n}\n\n// Compute attenuation & illumination
          from one light\nhalf3 computeOneLight(int idx, float3 eyePosition, half3
          eyeNormal, half3 viewDir, half4 diffuseColor, half shininess, inout half3
          specColor) {\n  float3 dirToLight = unity_LightPosition[idx].xyz;\n  half
          att = 1.0;\n  #if defined(POINT) || defined(SPOT)\n    dirToLight -= eyePosition
          * unity_LightPosition[idx].w;\n    // distance attenuation\n    float distSqr
          = dot(dirToLight, dirToLight);\n    att /= (1.0 + unity_LightAtten[idx].z
          * distSqr);\n    if (unity_LightPosition[idx].w != 0 && distSqr > unity_LightAtten[idx].w)
          att = 0.0; // set to 0 if outside of range\n    dirToLight *= rsqrt(distSqr);\n
          \   #if defined(SPOT)\n      // spot angle attenuation\n      half rho =
          max(dot(dirToLight, unity_SpotDirection[idx].xyz), 0.0);\n      half spotAtt
          = (rho - unity_LightAtten[idx].x) * unity_LightAtten[idx].y;\n      att
          *= saturate(spotAtt);\n    #endif\n  #endif\n  att *= 0.5; // passed in
          light colors are 2x brighter than what used to be in FFP\n  return min (computeLighting
          (idx, dirToLight, eyeNormal, viewDir, diffuseColor, shininess, att, specColor),
          1.0);\n}\n\n// uniforms\nhalf4 _Color;\nhalf4 _SpecColor;\nhalf4 _Emission;\nhalf
          _Shininess;\nint4 unity_VertexLightParams; // x: light count, y: zero, z:
          one (y/z needed by d3d9 vs loop instruction)\nfloat4 _MainTex_ST;\n\n//
          vertex shader input data\nstruct appdata {\n  float3 pos : POSITION;\n  float3
          normal : NORMAL;\n  float3 uv0 : TEXCOORD0;\n};\n\n// vertex-to-fragment
          interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n  #if ENABLE_SPECULAR\n
          \ fixed3 specColor : COLOR1;\n  #endif\n  float2 uv0 : TEXCOORD0;\n  #if
          USING_FOG\n    fixed fog : TEXCOORD1;\n  #endif\n  float4 pos : SV_POSITION;\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          eyeNormal = normalize (mul ((float3x3)UNITY_MATRIX_IT_MV, IN.normal).xyz);\n
          \ half3 viewDir = 0.0;\n  viewDir = -normalize (eyePos);\n  // lighting\n
          \ half3 lcolor = _Emission.rgb + _Color.rgb * glstate_lightmodel_ambient.rgb;\n
          \ half3 specColor = 0.0;\n  half shininess = _Shininess * 128.0;\n  for
          (int il = 0; il < LIGHT_LOOP_LIMIT; ++il) {\n    lcolor += computeOneLight(il,
          eyePos, eyeNormal, viewDir, _Color, shininess, specColor);\n  }\n  color.rgb
          = lcolor.rgb;\n  color.a = _Color.a;\n  specColor *= _SpecColor.rgb;\n  o.color
          = saturate(color);\n  #if ENABLE_SPECULAR\n  o.specColor = saturate(specColor);\n
          \ #endif\n  // compute texture coordinates\n  o.uv0 = IN.uv0.xy * _MainTex_ST.xy
          + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float fogCoord = length(eyePos.xyz);
          // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n    o.fog
          = saturate(unityFogFactor);\n  #endif\n  // transform position\n  o.pos
          = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n// textures\nsampler2D
          _MainTex;\n\n// fragment shader\nfixed4 frag (v2f IN) : SV_Target {\n  fixed4
          col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n  // SetTexture #0\n  tex = tex2D
          (_MainTex, IN.uv0.xy);\n  col.rgb = tex * IN.color;\n  col *= 2;\n  col.a
          = fixed4(1,1,1,1).a;\n  #if ENABLE_SPECULAR\n  // add specular color\n  col.rgb
          += IN.specColor;\n  #endif\n  // fog\n  #if USING_FOG\n    col.rgb = lerp
          (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n  return col;\n}\n\n//
          texenvs\n//! TexEnv0: 02010103 01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        - - _
          - POINT
          - SPOT
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR POINT SPOT
        m_BuiltinKeywords: 
      86388:
        m_Code: "#line 225 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      100980:
        m_Code: "#line 227 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Smoothness = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      105176:
        m_Code: "#line 248 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.67;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      105592:
        m_Code: "#line 252 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\thalf V1Node_249072_Uniform = 0;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      106561:
        m_Code: "#line 271 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.y);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates to pixel
          shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel
          shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      108109:
        m_Code: "#line 229 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_8574_Uniform = half4 (0.1910855, 0.2282516, 0.2794301, 0.1098039);\r\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = ColorNode_8574_Uniform;\r\n\t\t\to.Smoothness
          = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n
          \ float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3
          lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3
          lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir =
          normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      115343:
        m_Code: "#line 271 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.x);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates to pixel
          shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel
          shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      115774:
        m_Code: "#line 257 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half (half4
          arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          AbsoluteNode_251216_Output = unity_absolute_half (_SinTime);\r\n\t\t\thalf4
          MultiplyNode_243632_Output = unity_multiply_half (PowerNode_238842_Output,
          AbsoluteNode_251216_Output);\r\n\t\t\thalf V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf
          V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      121930:
        m_Code: "#line 271 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_FORWARDADD\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n#include \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define
          WorldReflectionVector(data,normal) data.worldRefl\n#define WorldNormalVector(data,normal)
          normal\n\n// Original surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n#line 24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.48;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.z);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  SHADOW_COORDS(3)\n  UNITY_FOG_COORDS(4)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n\n  TRANSFER_SHADOW(o); // pass shadow coordinates to pixel
          shader\n  UNITY_TRANSFER_FOG(o,o.pos); // pass fog coordinates to pixel
          shader\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      122531:
        m_Code: "#line 246 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.67;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_244106_Uniform = half4
          (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output = unity_multiply_half
          (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment
          interpolation data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3
          worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  SHADOW_COORDS(2)\n
          \ UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf vert_surf (appdata_full
          v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  o.pos = mul
          (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n
          \ fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos
          = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o); //
          pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      123745:
        m_Code: "#line 252 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.02;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0.2827587, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      129327:
        m_Code: "#line 250 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma multi_compile_fog\n#pragma
          multi_compile_fwdadd\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_FORWARDADD\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n#include
          \"AutoLight.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ SHADOW_COORDS(2)\n  UNITY_FOG_COORDS(3)\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n\n  TRANSFER_SHADOW(o);
          // pass shadow coordinates to pixel shader\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\n\n// fragment shader\nfixed4
          frag_surf (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input
          surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x =
          1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\n  UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)\n
          \ fixed4 c = 0;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  #if !defined(LIGHTMAP_ON)\n
          \     gi.light.color = _LightColor0.rgb;\n      gi.light.dir = lightDir;\n
          \     gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  #endif\n
          \ gi.light.color *= atten;\n  c += LightingStandard (o, worldViewDir, gi);\n
          \ c.a = 0.0;\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 07b21170726e47a1e66c744b4690681b
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin1:
        - - POINT
        - - DIRECTIONAL
        - - SPOT
        - - POINT_COOKIE
        - - DIRECTIONAL_COOKIE
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRECTIONAL DIRECTIONAL_COOKIE POINT POINT_COOKIE SPOT
      132694:
        m_Code: "#line 138 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Smoothness = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n#ifndef
          DIRLIGHTMAP_OFF\n  half3 viewDir : TEXCOORD2;\n#endif\n  float4 lmap : TEXCOORD3;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD4;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  #ifndef DIRLIGHTMAP_OFF\n  o.viewDir
          = viewDirForLight;\n  #endif\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw =
          v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.color.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      132821:
        m_Code: "#line 156 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.67;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      135133:
        m_Code: "#line 140 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_8574_Uniform = half4 (0.1910855, 0.2282516, 0.2794301, 0.1098039);\r\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = ColorNode_8574_Uniform;\r\n\t\t\to.Smoothness
          = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n#ifndef DIRLIGHTMAP_OFF\n
          \ half3 viewDir : TEXCOORD2;\n#endif\n  float4 lmap : TEXCOORD3;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD4;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  #ifndef DIRLIGHTMAP_OFF\n  o.viewDir
          = viewDirForLight;\n  #endif\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw =
          v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.color.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      135485:
        m_Code: "#line 178 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          YES\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.y);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  half3 viewDir : TEXCOORD3;\n  float4 lmap : TEXCOORD4;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD5; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD5;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);\n
          \ o.viewDir = viewDirForLight;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      155287:
        m_Code: "#line 178 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          YES\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.48;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.z);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  half3 viewDir : TEXCOORD3;\n  float4 lmap : TEXCOORD4;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD5; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD5;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);\n
          \ o.viewDir = viewDirForLight;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      155416:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\nfloat4 _MainTex_ST;\n\n//
          vertex shader input data\nstruct appdata {\n  float3 pos : POSITION;\n  float3
          uv1 : TEXCOORD1;\n  float3 uv0 : TEXCOORD0;\n};\n\n// vertex-to-fragment
          interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n  float2 uv0 : TEXCOORD0;\n
          \ float2 uv1 : TEXCOORD1;\n  #if USING_FOG\n    fixed fog : TEXCOORD2;\n
          \ #endif\n  float4 pos : SV_POSITION;\n};\n\n// vertex shader\nv2f vert
          (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n  float3 eyePos
          = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3 viewDir = 0.0;\n
          \ o.color = saturate(color);\n  // compute texture coordinates\n  o.uv0
          = IN.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  o.uv1 = IN.uv0.xy
          * _MainTex_ST.xy + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float
          fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n//
          textures\nsampler2D _MainTex;\nfixed4 _Color;\n\n// fragment shader\nfixed4
          frag (v2f IN) : SV_Target {\n  fixed4 col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n
          \ // SetTexture #0\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap, IN.uv0.xy);\n
          \ col = tex * _Color;\n  // SetTexture #1\n  tex = tex2D (_MainTex, IN.uv1.xy);\n
          \ col.rgb = tex * col;\n  col *= 2;\n  col.a = fixed4(1,1,1,1).a;\n  //
          fog\n  #if USING_FOG\n    col.rgb = lerp (unity_FogColor.rgb, col.rgb, IN.fog);\n
          \ #endif\n  return col;\n}\n\n// texenvs\n//! TexEnv0: 01010102 01010102
          [unity_Lightmap] [_Color] usesLightmapST\n//! TexEnv1: 02010100 01060004
          [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
      156791:
        m_Code: "#line 153 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: no\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          no\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half4 unity_subtract_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_8434;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\tfloat4 Texture_8434_Output = tex2D (Texture_8434, IN.meshUV0.xy);\r\n\t\t\thalf4
          SubtractNode_8436_Output = unity_subtract_half (half4 (1,1,1,1), Texture_8434_Output);\r\n\t\t\thalf4
          V4Node_8432 = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = SubtractNode_8436_Output;\r\n\t\t\to.Smoothness
          = V4Node_8432;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2; // meshUV0\n#ifndef
          DIRLIGHTMAP_OFF\n  half3 viewDir : TEXCOORD3;\n#endif\n  float4 lmap : TEXCOORD4;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD5; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD5;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);\n
          \ #ifndef DIRLIGHTMAP_OFF\n  o.viewDir = viewDirForLight;\n  #endif\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 = IN.custompack0.xyzw;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));\n
          \ #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n
          \ #else\n  SurfaceOutputStandard o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission
          = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion = 1.0;\n  fixed3 normalWorldVertex
          = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\nfixed3 originalNormal =
          o.Normal;\n  half atten = 1;\n\n  // Setup lighting environment\n  UnityGI
          gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI, gi);\n  gi.indirect.diffuse = 0;\n
          \ gi.indirect.specular = 0;\n  gi.light.color = 0;\n  gi.light.dir = half3(0,1,0);\n
          \ gi.light.ndotl = LambertTerm (o.Normal, gi.light.dir);\n  // Call GI (lightmaps/SH/reflections)
          lighting function\n  UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput,
          giInput);\n  giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n
          \ giInput.worldViewDir = worldViewDir;\n  giInput.atten = atten;\n  #if
          defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 64ee6905b8bb38aaac60f097a78c8074
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      156951:
        m_Code: "#line 158 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      159343:
        m_Code: "#line 160 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.02;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0.2827587, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      161166:
        m_Code: "#line 165 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half (half4
          arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          AbsoluteNode_251216_Output = unity_absolute_half (_SinTime);\r\n\t\t\thalf4
          MultiplyNode_243632_Output = unity_multiply_half (PowerNode_238842_Output,
          AbsoluteNode_251216_Output);\r\n\t\t\thalf V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf
          V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half3 viewDir : TEXCOORD2;\n
          \ float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n
          \   float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      161489:
        m_Code: "#line 111 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_PREPASSBASE\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef
          USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n
          \ #else\n    fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef
          UNITY_COMPILER_HLSL\n  SurfaceOutput o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n
          \ o.Alpha = 0.0;\n  o.Gloss = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n
          \ o.Normal = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n
          \ // call surface function\n  surf (surfIN, o);\n\n  // output normal and
          specular\n  fixed4 res;\n  res.rgb = o.Normal * 0.5 + 0.5;\n  res.a = o.Specular;\n
          \ return res;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 8cca82bb54c24520b5f044d7b7fdef97
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      164838:
        m_Code: "#line 136 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: no\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n#ifndef
          DIRLIGHTMAP_OFF\n  half3 viewDir : TEXCOORD2;\n#endif\n  float4 lmap : TEXCOORD3;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD4;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  #ifndef DIRLIGHTMAP_OFF\n  o.viewDir
          = viewDirForLight;\n  #endif\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw =
          v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.color.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      176372:
        m_Code: "#line 160 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: no\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n#ifndef
          DIRLIGHTMAP_OFF\n  half3 viewDir : TEXCOORD2;\n#endif\n  float4 lmap : TEXCOORD3;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD4;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  #ifndef DIRLIGHTMAP_OFF\n  o.viewDir
          = viewDirForLight;\n  #endif\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw =
          v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal
          = IN.worldNormal;\n  normalWorldVertex = IN.worldNormal;\n\n  // call surface
          function\n  surf (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half
          atten = 1;\n\n  // Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      176553:
        m_Code: "#line 160 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\thalf V1Node_249072_Uniform = 0;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half3 viewDir : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n
          \ #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n
          \ #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      186187:
        m_Code: "#line 178 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          YES\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.w);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  half3 viewDir : TEXCOORD3;\n  float4 lmap : TEXCOORD4;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD5; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD5;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);\n
          \ o.viewDir = viewDirForLight;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      195057:
        m_Code: "#line 178 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// vertex modifier: 'vert'\n// writes to
          per-pixel normal: no\n// writes to emission: YES\n// needs world space reflection
          vector: no\n// needs world space normal vector: no\n// needs screen space
          position: no\n// needs world space position: no\n// needs view direction:
          YES\n// needs world space view direction: no\n// needs world space position
          for lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.x);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment interpolation
          data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal
          : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half4 custompack0 : TEXCOORD2;
          // meshUV0\n  half3 viewDir : TEXCOORD3;\n  float4 lmap : TEXCOORD4;\n#ifdef
          LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n    half3 sh : TEXCOORD5; //
          SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n    float4 lmapFadePos :
          TEXCOORD5;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  float3 viewDirForLight = UnityWorldSpaceViewDir(worldPos);\n
          \ o.viewDir = viewDirForLight;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      195213:
        m_Code: "#line 154 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma exclude_renderers nomrt\n#pragma
          multi_compile_prepassfinal\n#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n// Surface
          shader code generated based on:\n// writes to per-pixel normal: no\n// writes
          to emission: YES\n// needs world space reflection vector: no\n// needs world
          space normal vector: no\n// needs screen space position: no\n// needs world
          space position: no\n// needs view direction: YES\n// needs world space view
          direction: no\n// needs world space position for lighting: YES\n// needs
          world space view direction for lighting: YES\n// needs world space view
          direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_DEFERRED\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.67;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_244106_Uniform = half4
          (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output = unity_multiply_half
          (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n\n// vertex-to-fragment
          interpolation data\nstruct v2f_surf {\n  float4 pos : SV_POSITION;\n  half3
          worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n  half3 viewDir
          : TEXCOORD2;\n  float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n
          \   float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  float3 viewDirForLight
          = UnityWorldSpaceViewDir(worldPos);\n  o.viewDir = viewDirForLight;\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh
          = 0;\n      o.sh = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n
          \ return o;\n}\n#ifdef LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4
          unity_Ambient;\n\n// fragment shader\nvoid frag_surf (v2f_surf IN,\n    out
          half4 outDiffuse : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n
          \   out half4 outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3)
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = normalize(IN.viewDir);\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.worldViewDir
          = worldViewDir;\n  giInput.atten = atten;\n  #if defined(LIGHTMAP_ON) ||
          defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV = IN.lmap;\n  #else\n
          \   giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingStandard_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingStandard_Deferred (o, worldViewDir,
          gi, outDiffuse, outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n
          \ outEmission.rgb = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 4a5545bf6a2d7c67df2b6874992801c2
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      196636:
        m_Code: "#line 208 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_8574_Uniform = half4 (0.1910855, 0.2282516, 0.2794301, 0.1098039);\r\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = ColorNode_8574_Uniform;\r\n\t\t\to.Smoothness
          = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  float3 worldPos : TEXCOORD0;\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      200775:
        m_Code: "#line 90 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          multi_compile_fog\n#pragma multi_compile_prepassfinal\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_PREPASSFINAL\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float2 pack0 : TEXCOORD0; //
          _MainTex\n  float3 worldPos : TEXCOORD1;\n  float4 screen : TEXCOORD2;\n
          \ float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n  float3 vlight : TEXCOORD4;\n#else\n#ifdef
          DIRLIGHTMAP_OFF\n  float4 lmapFadePos : TEXCOORD4;\n#endif\n#endif\n  UNITY_FOG_COORDS(5)\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  fixed3
          tSpace0 : TEXCOORD6;\n  fixed3 tSpace1 : TEXCOORD7;\n  fixed3 tSpace2 :
          TEXCOORD8;\n  #endif\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  #if !defined(LIGHTMAP_OFF)
          && defined(DIRLIGHTMAP_COMBINED)\n  fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);\n
          \ fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;\n  fixed3
          worldBinormal = cross(worldNormal, worldTangent) * tangentSign;\n  #endif\n
          \ #if !defined(LIGHTMAP_OFF) && defined(DIRLIGHTMAP_COMBINED)\n  o.tSpace0
          = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);\n
          \ o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);\n
          \ o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);\n
          \ #endif\n  o.worldPos = worldPos;\n  o.screen = ComputeScreenPos (o.pos);\n#ifndef
          DYNAMICLIGHTMAP_OFF\n  o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy
          + unity_DynamicLightmapST.zw;\n#else\n  o.lmap.zw = 0;\n#endif\n#ifndef
          LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n
          \ #ifdef DIRLIGHTMAP_OFF\n    o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz
          - unity_ShadowFadeCenterAndType.xyz) * unity_ShadowFadeCenterAndType.w;\n
          \   o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV, v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n
          \ #endif\n#else\n  o.lmap.xy = 0;\n  float3 worldN = UnityObjectToWorldNormal(v.normal);\n
          \ o.vlight = ShadeSH9 (float4(worldN,1.0));\n#endif\n  UNITY_TRANSFER_FOG(o,o.pos);
          // pass fog coordinates to pixel shader\n  return o;\n}\nsampler2D _LightBuffer;\n#if
          defined (SHADER_API_XBOX360) && defined (UNITY_HDR_ON)\nsampler2D _LightSpecBuffer;\n#endif\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  half4 light = tex2Dproj (_LightBuffer,
          UNITY_PROJ_COORD(IN.screen));\n#if defined (SHADER_API_MOBILE)\n  light
          = max(light, half4(0.001, 0.001, 0.001, 0.001));\n#endif\n#ifndef UNITY_HDR_ON\n
          \ light = -log2(light);\n#endif\n#if defined (SHADER_API_XBOX360) && defined
          (UNITY_HDR_ON)\n  light.w = tex2Dproj (_LightSpecBuffer, UNITY_PROJ_COORD(IN.screen)).r;\n#endif\n
          \ #ifndef LIGHTMAP_OFF\n    #ifdef DIRLIGHTMAP_OFF\n      // single lightmap\n
          \     fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap, IN.lmap.xy);\n      fixed3
          lm = DecodeLightmap (lmtex);\n      light.rgb += lm;\n    #elif DIRLIGHTMAP_COMBINED\n
          \     // directional lightmaps\n      fixed4 lmtex = UNITY_SAMPLE_TEX2D(unity_Lightmap,
          IN.lmap.xy);\n      half4 lm = half4(DecodeLightmap(lmtex), 0);\n      light
          += lm;\n    #elif DIRLIGHTMAP_SEPARATE\n      // directional with specular
          - no support\n    #endif // DIRLIGHTMAP_OFF\n  #else\n    light.rgb += IN.vlight;\n
          \ #endif // !LIGHTMAP_OFF\n\n  #ifndef DYNAMICLIGHTMAP_OFF\n  fixed4 dynlmtex
          = UNITY_SAMPLE_TEX2D(unity_DynamicLightmap, IN.lmap.zw);\n  light.rgb +=
          DecodeRealtimeLightmap (dynlmtex);\n  #endif\n\n  half4 c = LightingLambert_PrePass
          (o, light);\n  UNITY_APPLY_FOG(IN.fogCoord, c); // apply fog\n  UNITY_OPAQUE_ALPHA(c.a);\n
          \ return c;\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 8cca82bb54c24520b5f044d7b7fdef97
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - __
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      201947:
        m_Code: "#line 222 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.67;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      206675:
        m_Code: "#line 244 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.48;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.z);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      212660:
        m_Code: "#line 224 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      226401:
        m_Code: "#line 231 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_absolute_half (half4
          arg1)\r\n\t\t{\r\n\t\t\treturn abs(arg1);\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3
          viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          AbsoluteNode_251216_Output = unity_absolute_half (_SinTime);\r\n\t\t\thalf4
          MultiplyNode_243632_Output = unity_multiply_half (PowerNode_238842_Output,
          AbsoluteNode_251216_Output);\r\n\t\t\thalf V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf
          V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      226435:
        m_Code: "#line 221 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 0 texcoords actually used\n#define
          UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half4 unity_subtract_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_8434;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\thalf4 meshUV0;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\tfloat4 Texture_8434_Output = tex2D (Texture_8434, IN.meshUV0.xy);\r\n\t\t\thalf4
          SubtractNode_8436_Output = unity_subtract_half (half4 (1,1,1,1), Texture_8434_Output);\r\n\t\t\thalf4
          V4Node_8432 = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Albedo = SubtractNode_8436_Output;\r\n\t\t\to.Smoothness
          = V4Node_8432;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  float3 worldPos : TEXCOORD0;\n  half4 custompack0 : TEXCOORD1;
          // meshUV0\n};\n\n// vertex shader\nv2f_surf vert_surf (appdata_full v)
          {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n  Input customInputData;\n
          \ vert (v, customInputData);\n  o.custompack0.xyzw = customInputData.meshUV0;\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0
          = IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n
          \ SurfaceOutputStandard o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard
          o;\n  #endif\n  o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n
          \ o.Occlusion = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  //
          call surface function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 40a1672670558f726ca540771e6ec445
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      236826:
        m_Code: "#line 226 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_244106_Uniform = half4 (0, 0.3379312, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0;\r\n\t\t\thalf V1Node_249072_Uniform = 0;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      238236:
        m_Code: "#line 244 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.x);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      240156:
        m_Code: "#line 244 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.w);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      243949:
        m_Code: "#line 228 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: no\n// needs
          world space view direction: no\n// needs world space position for lighting:
          YES\n// needs world space view direction for lighting: YES\n// needs world
          space view direction for lightmaps: no\n// needs vertex color: no\n// needs
          VFACE: no\n// passes tangent-to-world matrix to pixel shader: no\n// reads
          from normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 1.52;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0, 0, 0, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float3 worldPos : TEXCOORD0;\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.viewDir.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      245873:
        m_Code: "#line 204 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float3 worldPos : TEXCOORD0;\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      246571:
        m_Code: "#line 226 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          ColorNode_245822_Uniform = half4 (1, 0, 0, 0);\r\n\t\t\thalf V1Node_237714_Uniform
          = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal, IN.viewDir);\r\n\t\t\thalf
          SubtractNode_236954_Output = unity_subtract_half (V1Node_237714_Uniform,
          DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform = 2.02;\r\n\t\t\thalf
          PowerNode_238842_Output = pow (SubtractNode_236954_Output, V1Node_242218_Uniform);\r\n\t\t\thalf4
          ColorNode_261798_Uniform = half4 (0.2827587, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf
          V1Node_248576_Uniform = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo
          = ColorNode_245822_Uniform;\r\n\t\t\to.Emission = MultiplyNode_243632_Output;\r\n\t\t\to.Metallic
          = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n
          \ float3 worldPos : TEXCOORD1;\n};\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      249241:
        m_Code: "#pragma vertex vert\n#pragma fragment frag\n#include \"UnityShaderVariables.cginc\"\n#pragma
          multi_compile_fog\n#include \"UnityCG.cginc\"\n#define USING_FOG (defined(FOG_LINEAR)
          || defined(FOG_EXP) || defined(FOG_EXP2))\n\n// uniforms\nfloat4 unity_Lightmap_ST;\nfloat4
          _MainTex_ST;\n\n// vertex shader input data\nstruct appdata {\n  float3
          pos : POSITION;\n  float3 uv1 : TEXCOORD1;\n  float3 uv0 : TEXCOORD0;\n};\n\n//
          vertex-to-fragment interpolators\nstruct v2f {\n  fixed4 color : COLOR0;\n
          \ float2 uv0 : TEXCOORD0;\n  float2 uv1 : TEXCOORD1;\n  float2 uv2 : TEXCOORD2;\n
          \ #if USING_FOG\n    fixed fog : TEXCOORD3;\n  #endif\n  float4 pos : SV_POSITION;\n};\n\n//
          vertex shader\nv2f vert (appdata IN) {\n  v2f o;\n  half4 color = half4(0,0,0,1.1);\n
          \ float3 eyePos = mul (UNITY_MATRIX_MV, float4(IN.pos,1)).xyz;\n  half3
          viewDir = 0.0;\n  o.color = saturate(color);\n  // compute texture coordinates\n
          \ o.uv0 = IN.uv1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n  o.uv1
          = IN.uv1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n  o.uv2 = IN.uv0.xy
          * _MainTex_ST.xy + _MainTex_ST.zw;\n  // fog\n  #if USING_FOG\n    float
          fogCoord = length(eyePos.xyz); // radial fog distance\n    UNITY_CALC_FOG_FACTOR(fogCoord);\n
          \   o.fog = saturate(unityFogFactor);\n  #endif\n  // transform position\n
          \ o.pos = mul(UNITY_MATRIX_MVP, float4(IN.pos,1));\n  return o;\n}\n\n//
          textures\nsampler2D _MainTex;\nfixed4 _Color;\n\n// fragment shader\nfixed4
          frag (v2f IN) : SV_Target {\n  fixed4 col;\n  fixed4 tex, tmp0, tmp1, tmp2;\n
          \ // SetTexture #0\n  tex = UNITY_SAMPLE_TEX2D (unity_Lightmap, IN.uv0.xy);\n
          \ col = tex * tex.a;\n  col *= 2;\n  // SetTexture #1\n  tex = UNITY_SAMPLE_TEX2D
          (unity_Lightmap, IN.uv1.xy);\n  col = col * _Color;\n  // SetTexture #2\n
          \ tex = tex2D (_MainTex, IN.uv2.xy);\n  col.rgb = tex * col;\n  col *= 4;\n
          \ col.a = fixed4(1,1,1,1).a;\n  // fog\n  #if USING_FOG\n    col.rgb = lerp
          (unity_FogColor.rgb, col.rgb, IN.fog);\n  #endif\n  return col;\n}\n\n//
          texenvs\n//! TexEnv0: 02010105 02010105 [unity_Lightmap] usesLightmapST\n//!
          TexEnv1: 01000102 01000102 [unity_Lightmap] [_Color]\n//! TexEnv2: 04010100
          01060004 [_MainTex] [ffffffff]\n"
        m_AssetPath: 
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 00000000000000000000000000000000
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser1:
        - - _
          - FOG_LINEAR
          - FOG_EXP
          - FOG_EXP2
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2: []
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: FOG_EXP FOG_EXP2 FOG_LINEAR
        m_BuiltinKeywords: 
      250966:
        m_Code: "#line 206 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: YES\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: no\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\n\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat4 color : COLOR;\r\n\n\t\t};\n\n\t\tvoid
          vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf4
          V4Node_8468_Uniform = half4 (0.9, 0, 0, 0);\r\n\t\t\to.Smoothness = V4Node_8468_Uniform;\r\n\n\t\t}\n\t\t\n#include
          \"UnityMetaPass.cginc\"\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float3 worldPos : TEXCOORD0;\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf
          (v2f_surf IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n
          \ UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n  surfIN.color.x = 1.0;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      252802:
        m_Code: "#line 220 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: YES\n// needs world space reflection vector:
          no\n// needs world space normal vector: no\n// needs screen space position:
          no\n// needs world space position: no\n// needs view direction: YES\n//
          needs world space view direction: no\n// needs world space position for
          lighting: YES\n// needs world space view direction for lighting: YES\n//
          needs world space view direction for lightmaps: no\n// needs vertex color:
          no\n// needs VFACE: no\n// passes tangent-to-world matrix to pixel shader:
          no\n// reads from normal: YES\n// 0 texcoords actually used\n#define UNITY_PASS_META\n#include
          \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include \"UnityPBSLighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 24
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard \n\t\t//#pragma glsl\n\t\t//#pragma
          debug\n\n\n\n\t\tinline half unity_subtract_half (half arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_multiply_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\n\n\t\tstruct
          Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\n\t\t};\n\n\t\tvoid vert (inout
          appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\n\t\t}\n\t
          \ \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard o) \n\t\t{\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 2.67;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_244106_Uniform = half4
          (0.3655171, 0, 1, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output = unity_multiply_half
          (PowerNode_238842_Output, ColorNode_244106_Uniform);\r\n\t\t\to.Emission
          = MultiplyNode_243632_Output;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n};\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  float3 worldPos = mul(_Object2World,
          v.vertex).xyz;\n  fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);\n
          \ o.worldPos = worldPos;\n  o.worldNormal = worldNormal;\n  return o;\n}\n\n//
          fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target {\n  // prepare
          and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      259008:
        m_Code: "#line 244 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          target 3.0\n#pragma glsl\n#pragma debug\n#pragma skip_variants FOG_LINEAR
          FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// vertex modifier: 'vert'\n//
          writes to per-pixel normal: no\n// writes to emission: YES\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: YES\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: YES\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: YES\n// 0 texcoords actually
          used\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n#include
          \"UnityPBSLighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          24 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n\t\t//#pragma
          target 3.0\n\t\t//#pragma surface surf Standard vertex:vert\n\t\t//#pragma
          glsl\n\t\t//#pragma debug\n\n\n\n\t\tinline half unity_subtract_half (half
          arg1, half arg2)\r\n\t\t{\r\n\t\t\treturn arg1 - arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline
          half4 unity_multiply_half (half4 arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn
          arg1 * arg2;\r\n\t\t}\r\n\t\t\r\n\t\tinline half4 unity_add_half (half4
          arg1, half4 arg2)\r\n\t\t{\r\n\t\t\treturn arg1 + arg2;\r\n\t\t}\r\n\t\t\r\n\n\n\t\tsampler2D
          Texture_292360_Uniform;\r\n\n\n\t\tstruct Input \n\t\t{\n\t\t\tfloat3 viewDir;\r\n\t\t\thalf4
          meshUV0;\r\n\n\t\t};\n\n\t\tvoid vert (inout appdata_full v, out Input o)\n\t\t{\n\t\t\tUNITY_INITIALIZE_OUTPUT(Input,o);\n\t\t\to.meshUV0
          = v.texcoord;\r\n\n\t\t}\n\t  \n\t\tvoid surf (Input IN, inout SurfaceOutputStandard
          o) \n\t\t{\n\t\t\thalf4 ColorNode_245822_Uniform = half4 (0.309, 0, 0, 0);\r\n\t\t\thalf
          V1Node_237714_Uniform = 1;\r\n\t\t\thalf DotNode_235230_Output = dot (o.Normal,
          IN.viewDir);\r\n\t\t\thalf SubtractNode_236954_Output = unity_subtract_half
          (V1Node_237714_Uniform, DotNode_235230_Output);\r\n\t\t\thalf V1Node_242218_Uniform
          = 1.29;\r\n\t\t\thalf PowerNode_238842_Output = pow (SubtractNode_236954_Output,
          V1Node_242218_Uniform);\r\n\t\t\thalf4 ColorNode_261798_Uniform = half4
          (0.4704261, 0.8308824, 0.5027428, 0);\r\n\t\t\thalf4 MultiplyNode_243632_Output
          = unity_multiply_half (PowerNode_238842_Output, ColorNode_261798_Uniform);\r\n\t\t\thalf4
          UV_292748_UV = IN.meshUV0;\r\n\t\t\thalf4 AddNode_293768_Output = unity_add_half
          (UV_292748_UV, _Time.y);\r\n\t\t\tfloat4 Texture_292360 = tex2D (Texture_292360_Uniform,
          AddNode_293768_Output.xy);\r\n\t\t\thalf4 MultiplyNode_302476_Output = unity_multiply_half
          (MultiplyNode_243632_Output, Texture_292360);\r\n\t\t\thalf V1Node_248576_Uniform
          = 0.21;\r\n\t\t\thalf V1Node_249072_Uniform = 0.8;\r\n\t\t\to.Albedo = ColorNode_245822_Uniform;\r\n\t\t\to.Emission
          = MultiplyNode_302476_Output;\r\n\t\t\to.Metallic = V1Node_248576_Uniform;\r\n\t\t\to.Smoothness
          = V1Node_249072_Uniform;\r\n\n\t\t}\n\t\t\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  half3 worldNormal : TEXCOORD0;\n  float3 worldPos : TEXCOORD1;\n
          \ half4 custompack0 : TEXCOORD2; // meshUV0\n};\n\n// vertex shader\nv2f_surf
          vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ Input customInputData;\n  vert (v, customInputData);\n  o.custompack0.xyzw
          = customInputData.meshUV0;\n  o.pos = UnityMetaVertexPosition(v.vertex,
          v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);\n
          \ float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3 worldNormal
          = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n  o.worldNormal
          = worldNormal;\n  return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf
          IN) : SV_Target {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.viewDir.x = 1.0;\n  surfIN.meshUV0.x = 1.0;\n  surfIN.meshUV0 =
          IN.custompack0.xyzw;\n  float3 worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n
          \   fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n
          \   fixed3 lightDir = _WorldSpaceLightPos0.xyz;\n  #endif\n  fixed3 worldViewDir
          = normalize(UnityWorldSpaceViewDir(worldPos));\n  fixed3 viewDir = worldViewDir;\n
          \ surfIN.viewDir = viewDir;\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutputStandard
          o = (SurfaceOutputStandard)0;\n  #else\n  SurfaceOutputStandard o;\n  #endif\n
          \ o.Albedo = 0.0;\n  o.Emission = 0.0;\n  o.Alpha = 0.0;\n  o.Occlusion
          = 1.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/UnityShaderEditor/Graphs
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: f0c4ec9a21f90f548d80306f033db9cb
        m_IsGLSL: 0
        m_FromOther: 0
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 2
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
      267886:
        m_Code: "#line 171 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          exclude_renderers nomrt\n#pragma multi_compile_prepassfinal\n#pragma skip_variants
          FOG_LINEAR FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n//
          Surface shader code generated based on:\n// writes to per-pixel normal:
          no\n// writes to emission: no\n// needs world space reflection vector: no\n//
          needs world space normal vector: no\n// needs screen space position: no\n//
          needs world space position: no\n// needs view direction: no\n// needs world
          space view direction: no\n// needs world space position for lighting: YES\n//
          needs world space view direction for lighting: no\n// needs world space
          view direction for lightmaps: no\n// needs vertex color: no\n// needs VFACE:
          no\n// passes tangent-to-world matrix to pixel shader: no\n// reads from
          normal: YES\n// 1 texcoords actually used\n//   float2 _MainTex\n#define
          UNITY_PASS_DEFERRED\n#include \"UnityCG.cginc\"\n#include \"Lighting.cginc\"\n\n#define
          INTERNAL_DATA\n#define WorldReflectionVector(data,normal) data.worldRefl\n#define
          WorldNormalVector(data,normal) normal\n\n// Original surface shader snippet:\n#include
          \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line 8
          \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n\n// vertex-to-fragment interpolation data\nstruct
          v2f_surf {\n  float4 pos : SV_POSITION;\n  float2 pack0 : TEXCOORD0; //
          _MainTex\n  half3 worldNormal : TEXCOORD1;\n  float3 worldPos : TEXCOORD2;\n
          \ float4 lmap : TEXCOORD3;\n#ifdef LIGHTMAP_OFF\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   half3 sh : TEXCOORD4; // SH\n  #endif\n#else\n  #ifdef DIRLIGHTMAP_OFF\n
          \   float4 lmapFadePos : TEXCOORD4;\n  #endif\n#endif\n};\nfloat4 _MainTex_ST;\n\n//
          vertex shader\nv2f_surf vert_surf (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = mul (UNITY_MATRIX_MVP, v.vertex);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n
          \ o.worldNormal = worldNormal;\n#ifndef DYNAMICLIGHTMAP_OFF\n  o.lmap.zw
          = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;\n#else\n
          \ o.lmap.zw = 0;\n#endif\n#ifndef LIGHTMAP_OFF\n  o.lmap.xy = v.texcoord1.xy
          * unity_LightmapST.xy + unity_LightmapST.zw;\n  #ifdef DIRLIGHTMAP_OFF\n
          \   o.lmapFadePos.xyz = (mul(_Object2World, v.vertex).xyz - unity_ShadowFadeCenterAndType.xyz)
          * unity_ShadowFadeCenterAndType.w;\n    o.lmapFadePos.w = (-mul(UNITY_MATRIX_MV,
          v.vertex).z) * (1.0 - unity_ShadowFadeCenterAndType.w);\n  #endif\n#else\n
          \ o.lmap.xy = 0;\n    #if UNITY_SHOULD_SAMPLE_SH\n      o.sh = 0;\n      o.sh
          = ShadeSHPerVertex (worldNormal, o.sh);\n    #endif\n#endif\n  return o;\n}\n#ifdef
          LIGHTMAP_ON\nfloat4 unity_LightmapFade;\n#endif\nfixed4 unity_Ambient;\n\n//
          fragment shader\nvoid frag_surf (v2f_surf IN,\n    out half4 outDiffuse
          : SV_Target0,\n    out half4 outSpecSmoothness : SV_Target1,\n    out half4
          outNormal : SV_Target2,\n    out half4 outEmission : SV_Target3) {\n  //
          prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n  o.Normal = IN.worldNormal;\n
          \ normalWorldVertex = IN.worldNormal;\n\n  // call surface function\n  surf
          (surfIN, o);\nfixed3 originalNormal = o.Normal;\n  half atten = 1;\n\n  //
          Setup lighting environment\n  UnityGI gi;\n  UNITY_INITIALIZE_OUTPUT(UnityGI,
          gi);\n  gi.indirect.diffuse = 0;\n  gi.indirect.specular = 0;\n  gi.light.color
          = 0;\n  gi.light.dir = half3(0,1,0);\n  gi.light.ndotl = LambertTerm (o.Normal,
          gi.light.dir);\n  // Call GI (lightmaps/SH/reflections) lighting function\n
          \ UnityGIInput giInput;\n  UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);\n
          \ giInput.light = gi.light;\n  giInput.worldPos = worldPos;\n  giInput.atten
          = atten;\n  #if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)\n    giInput.lightmapUV
          = IN.lmap;\n  #else\n    giInput.lightmapUV = 0.0;\n  #endif\n  #if UNITY_SHOULD_SAMPLE_SH\n
          \   giInput.ambient = IN.sh;\n  #else\n    giInput.ambient.rgb = 0.0;\n
          \ #endif\n  giInput.probeHDR[0] = unity_SpecCube0_HDR;\n  giInput.probeHDR[1]
          = unity_SpecCube1_HDR;\n  #if UNITY_SPECCUBE_BLENDING || UNITY_SPECCUBE_BOX_PROJECTION\n
          \   giInput.boxMin[0] = unity_SpecCube0_BoxMin; // .w holds lerp value for
          blending\n  #endif\n  #if UNITY_SPECCUBE_BOX_PROJECTION\n    giInput.boxMax[0]
          = unity_SpecCube0_BoxMax;\n    giInput.probePosition[0] = unity_SpecCube0_ProbePosition;\n
          \   giInput.boxMax[1] = unity_SpecCube1_BoxMax;\n    giInput.boxMin[1] =
          unity_SpecCube1_BoxMin;\n    giInput.probePosition[1] = unity_SpecCube1_ProbePosition;\n
          \ #endif\n  LightingLambert_GI(o, giInput, gi);\n\n  // call lighting function
          to output g-buffer\n  outEmission = LightingLambert_Deferred (o, gi, outDiffuse,
          outSpecSmoothness, outNormal);\n  #ifndef UNITY_HDR_ON\n  outEmission.rgb
          = exp2(-outEmission.rgb);\n  #endif\n  UNITY_OPAQUE_ALPHA(outDiffuse.a);\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294958079
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 8cca82bb54c24520b5f044d7b7fdef97
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin1:
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - HDR_LIGHT_PREPASS_OFF
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_OFF
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_COMBINED
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_OFF
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_OFF
          - UNITY_HDR_ON
        - - LIGHTMAP_ON
          - DIRLIGHTMAP_SEPARATE
          - DYNAMICLIGHTMAP_ON
          - UNITY_HDR_ON
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: DIRLIGHTMAP_COMBINED DIRLIGHTMAP_OFF DIRLIGHTMAP_SEPARATE
          DYNAMICLIGHTMAP_OFF DYNAMICLIGHTMAP_ON HDR_LIGHT_PREPASS_OFF LIGHTMAP_OFF
          LIGHTMAP_ON UNITY_HDR_ON
      335014:
        m_Code: "#line 171 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//
          compile directives\n#pragma vertex vert_surf\n#pragma fragment frag_surf\n#pragma
          skip_variants FOG_LINEAR FOG_EXP FOG_EXP2\n#include \"HLSLSupport.cginc\"\n#include
          \"UnityShaderVariables.cginc\"\n// Surface shader code generated based on:\n//
          writes to per-pixel normal: no\n// writes to emission: no\n// needs world
          space reflection vector: no\n// needs world space normal vector: no\n//
          needs screen space position: no\n// needs world space position: no\n// needs
          view direction: no\n// needs world space view direction: no\n// needs world
          space position for lighting: YES\n// needs world space view direction for
          lighting: no\n// needs world space view direction for lightmaps: no\n//
          needs vertex color: no\n// needs VFACE: no\n// passes tangent-to-world matrix
          to pixel shader: no\n// reads from normal: no\n// 1 texcoords actually used\n//
          \  float2 _MainTex\n#define UNITY_PASS_META\n#include \"UnityCG.cginc\"\n#include
          \"Lighting.cginc\"\n\n#define INTERNAL_DATA\n#define WorldReflectionVector(data,normal)
          data.worldRefl\n#define WorldNormalVector(data,normal) normal\n\n// Original
          surface shader snippet:\n#include \"HLSLSupport.cginc\"\n#include \"UnityShaderVariables.cginc\"\n#line
          8 \"\"\n#ifdef DUMMY_PREPROCESSOR_TO_WORK_AROUND_HLSL_COMPILER_LINE_HANDLING\n#endif\n\n//#pragma
          surface surf Lambert\n\nsampler2D _MainTex;\nfixed4 _Color;\n\nstruct Input
          {\n\tfloat2 uv_MainTex;\n};\n\nvoid surf (Input IN, inout SurfaceOutput
          o) {\n\tfixed4 c = tex2D(_MainTex, IN.uv_MainTex) * _Color;\n\to.Albedo
          = c.rgb;\n\to.Alpha = c.a;\n}\n\n#include \"UnityMetaPass.cginc\"\n\n//
          vertex-to-fragment interpolation data\nstruct v2f_surf {\n  float4 pos :
          SV_POSITION;\n  float2 pack0 : TEXCOORD0; // _MainTex\n  float3 worldPos
          : TEXCOORD1;\n};\nfloat4 _MainTex_ST;\n\n// vertex shader\nv2f_surf vert_surf
          (appdata_full v) {\n  v2f_surf o;\n  UNITY_INITIALIZE_OUTPUT(v2f_surf,o);\n
          \ o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy,
          unity_LightmapST, unity_DynamicLightmapST);\n  o.pack0.xy = TRANSFORM_TEX(v.texcoord,
          _MainTex);\n  float3 worldPos = mul(_Object2World, v.vertex).xyz;\n  fixed3
          worldNormal = UnityObjectToWorldNormal(v.normal);\n  o.worldPos = worldPos;\n
          \ return o;\n}\n\n// fragment shader\nfixed4 frag_surf (v2f_surf IN) : SV_Target
          {\n  // prepare and unpack data\n  Input surfIN;\n  UNITY_INITIALIZE_OUTPUT(Input,surfIN);\n
          \ surfIN.uv_MainTex.x = 1.0;\n  surfIN.uv_MainTex = IN.pack0.xy;\n  float3
          worldPos = IN.worldPos;\n  #ifndef USING_DIRECTIONAL_LIGHT\n    fixed3 lightDir
          = normalize(UnityWorldSpaceLightDir(worldPos));\n  #else\n    fixed3 lightDir
          = _WorldSpaceLightPos0.xyz;\n  #endif\n  #ifdef UNITY_COMPILER_HLSL\n  SurfaceOutput
          o = (SurfaceOutput)0;\n  #else\n  SurfaceOutput o;\n  #endif\n  o.Albedo
          = 0.0;\n  o.Emission = 0.0;\n  o.Specular = 0.0;\n  o.Alpha = 0.0;\n  o.Gloss
          = 0.0;\n  fixed3 normalWorldVertex = fixed3(0,0,1);\n\n  // call surface
          function\n  surf (surfIN, o);\n  UnityMetaInput metaIN;\n  UNITY_INITIALIZE_OUTPUT(UnityMetaInput,
          metaIN);\n  metaIN.Albedo = o.Albedo;\n  metaIN.Emission = o.Emission;\n
          \ return UnityMetaFragment(metaIN);\n}\n\n"
        m_AssetPath: Assets/DefaultResourcesExtra
        m_PlatformMask: 4294967295
        m_TypesMask: 3
        m_IncludesHash:
          serializedVersion: 2
          Hash: 958b42a13cf168bbadd9d293524e08af
        m_IsGLSL: 0
        m_FromOther: 1
        m_VariantsUser0: []
        m_VariantsUser1: []
        m_VariantsUser2: []
        m_VariantsUser3: []
        m_VariantsUser4: []
        m_VariantsUser5: []
        m_VariantsBuiltin0: []
        m_VariantsBuiltin1: []
        m_VariantsBuiltin2: []
        m_VariantsBuiltin3: []
        m_VariantsBuiltin4: []
        m_VariantsBuiltin5: []
        m_Target: 0
        m_TargetVariants0: []
        m_TargetVariants1: []
        m_TargetVariants2:
        - SHADOWS_SOFT
        - DIRLIGHTMAP_COMBINED
        - DIRLIGHTMAP_SEPARATE
        - DYNAMICLIGHTMAP_ON
        m_TargetVariants3: []
        m_TargetVariants4: []
        m_TargetVariants5: []
        m_NonStrippedUserKeywords: 
        m_BuiltinKeywords: 
    m_MeshComponentsFromSnippets: 0
    m_HasSurfaceShaders: 1
    m_HasFixedFunctionShaders: 1
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: ef5b9f0785847b04983f907c7f016a36, type: 3}
  m_Name: SimpleGraph
  m_EditorClassIdentifier: 
  m_MaterialProperties: {fileID: 11464382}
  m_MaterialOptions: {fileID: 11415370}
  m_PixelGraph: {fileID: 11434580}
  m_Shader: {fileID: 4819548}
--- !u!114 &11405458
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 088fb5bde3ece0f4190136b3ab43f7c4, type: 3}
  m_Name: MultiplyNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -264.40448
    y: 123.83087
    width: -136
    height: -22
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11405458}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11405458}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11405458}
  m_PrecisionNames:
  - half
--- !u!114 &11409428
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 357a15b35b0cd9e47a66e10c5b627fcd, type: 3}
  m_Name: AddNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -931.40454
    y: 353.83087
    width: -108
    height: 168
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11409428}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11409428}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11409428}
  m_PrecisionNames:
  - half
  m_DefaultValue: 0
--- !u!114 &11411012
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5b34601661908b3499c4c5e2ecd61f75, type: 3}
  m_Name: Normal
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Normal
    m_Name: Normal
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -2142.7893
    y: -774.4031
    width: 1616.9116
    height: 870.9586
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Normal
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Normal
      m_Node: {fileID: 11411012}
  m_PrecisionNames:
  - half
--- !u!114 &11411426
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 87c4299b09d95d64c99884296038ceeb, type: 3}
  m_Name: V1Node
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Value
    m_Name: Value
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 157.36491
    y: 412.51227
    width: 71.7574
    height: -309.9568
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Value
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Value
      m_Node: {fileID: 11411426}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Value: 0.21
--- !u!114 &11412718
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4b496ffd32c22d94bb525897d152da05, type: 3}
  m_Name: AbsoluteNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input
    m_Name: Input
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -39.877747
    y: 595.5555
    width: 170.00006
    height: 258
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input
      m_Node: {fileID: 11412718}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11412718}
  m_PrecisionNames:
  - half
--- !u!114 &11415036
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 38072936174514040b3e08813a3ec4e7, type: 3}
  m_Name: PixelMaster
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Albedo
    m_Name: Albedo
    m_DataTypeString: 
  - type: 0
    m_Title: Normal
    m_Name: Normal
    m_DataTypeString: 
  - type: 0
    m_Title: Specular
    m_Name: Specular
    m_DataTypeString: 
  - type: 0
    m_Title: Emission
    m_Name: Emission
    m_DataTypeString: 
  - type: 0
    m_Title: Metallic
    m_Name: Metallic
    m_DataTypeString: 
  - type: 0
    m_Title: Smoothness
    m_Name: Smoothness
    m_DataTypeString: 
  - type: 0
    m_Title: Occlusion
    m_Name: Occlusion
    m_DataTypeString: 
  - type: 0
    m_Title: Alpha
    m_Name: Alpha
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 747
    y: 56.000015
    width: 223
    height: 281
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Albedo
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Albedo
      m_Node: {fileID: 11415036}
  - slotName: Normal
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Normal
      m_Node: {fileID: 11415036}
  - slotName: Specular
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Specular
      m_Node: {fileID: 11415036}
  - slotName: Emission
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Emission
      m_Node: {fileID: 11415036}
  - slotName: Metallic
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Metallic
      m_Node: {fileID: 11415036}
  - slotName: Smoothness
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Smoothness
      m_Node: {fileID: 11415036}
  - slotName: Occlusion
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Occlusion
      m_Node: {fileID: 11415036}
  - slotName: Alpha
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Alpha
      m_Node: {fileID: 11415036}
  m_PrecisionNames:
  - half
  m_LightFunctionClassName: UnityEditor.MaterialGraph.PBRMetalicLightFunction
--- !u!114 &11415370
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: edd99bcf0936ee84794c384dffae5501, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_SrcBlend: 0
  m_DstBlend: 1
  m_CullMode: 0
  m_ZTest: 2
  m_ZWrite: 0
  m_RenderQueue: 1
  m_RenderType: 0
  m_ShadowPass: 0
  m_FullForwardShadows: 0
  m_NoAmbient: 0
  m_NoVertexLights: 0
  m_NoLightmaps: 0
  m_NoDirLightmap: 0
  m_NoForwardAdd: 0
  m_ApproxView: 0
  m_HalfAsView: 0
--- !u!114 &11420240
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b251c305a044f49438dff356f1e7bb84, type: 3}
  m_Name: SubtractNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1529.1774
    y: -500.3128
    width: 1514.2997
    height: 589.8682
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11420240}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11420240}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11420240}
  m_PrecisionNames:
  - half
--- !u!114 &11422740
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f34a640000e664d4f8b2e0795df7fad9, type: 3}
  m_Name: V4Node
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Value
    m_Name: Value
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 4
    y: 212
    width: 546
    height: 0
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: 
    value:
      m_DefaultVector: {x: 0, y: 0, z: 0, w: 0}
      m_SlotName: 
      m_Node: {fileID: 0}
  - slotName: Value
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Value
      m_Node: {fileID: 11422740}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Value: {x: 0.9, y: 0, z: 0, w: 0}
--- !u!114 &11423928
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5defdf1d05185a343bfebb2cdd827bd6, type: 3}
  m_Name: Texture
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: RGBA
    m_Name: RGBA
    m_DataTypeString: 
  - type: 1
    m_Title: R
    m_Name: R
    m_DataTypeString: 
  - type: 1
    m_Title: G
    m_Name: G
    m_DataTypeString: 
  - type: 1
    m_Title: B
    m_Name: B
    m_DataTypeString: 
  - type: 1
    m_Title: A
    m_Name: A
    m_DataTypeString: 
  - type: 0
    m_Title: UV
    m_Name: UV
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -543.4045
    y: 239.83087
    width: 108
    height: -188
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: RGBA
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: RGBA
      m_Node: {fileID: 11423928}
  - slotName: R
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: R
      m_Node: {fileID: 11423928}
  - slotName: G
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: G
      m_Node: {fileID: 11423928}
  - slotName: B
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: B
      m_Node: {fileID: 11423928}
  - slotName: A
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: A
      m_Node: {fileID: 11423928}
  - slotName: UV
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: UV
      m_Node: {fileID: 11423928}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_DefaultTexture: {fileID: 2800000, guid: 506344993fb95dd46856ac1f9f5a5be0, type: 3}
  m_TextureType: 0
--- !u!114 &11426504
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 87c4299b09d95d64c99884296038ceeb, type: 3}
  m_Name: V1Node
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Value
    m_Name: Value
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1838.281
    y: -641.6581
    width: 1837.4033
    height: 672.2135
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Value
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Value
      m_Node: {fileID: 11426504}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Value: 1
--- !u!114 &11433636
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b251c305a044f49438dff356f1e7bb84, type: 3}
  m_Name: SubtractNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 74
    y: -320
    width: 468
    height: 257
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11433636}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11433636}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11433636}
  m_PrecisionNames:
  - half
--- !u!114 &11434580
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 226075d30f5b2694caa212aa3e968148, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  nodes:
  - {fileID: 11415036}
  - {fileID: 11478450}
  - {fileID: 11411012}
  - {fileID: 11463548}
  - {fileID: 11420240}
  - {fileID: 11426504}
  - {fileID: 11465974}
  - {fileID: 11465480}
  - {fileID: 11463844}
  - {fileID: 11478436}
  - {fileID: 11411426}
  - {fileID: 11444260}
  - {fileID: 11473952}
  - {fileID: 11423928}
  - {fileID: 11486492}
  - {fileID: 11409428}
  - {fileID: 11483632}
  - {fileID: 11405458}
  edges:
  - m_FromNode: {fileID: 11411012}
    m_ToNode: {fileID: 11478450}
    m_FromSlotName: Normal
    m_ToSlotName: Input1
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11463548}
    m_ToNode: {fileID: 11478450}
    m_FromSlotName: ViewDirection
    m_ToSlotName: Input2
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11478450}
    m_ToNode: {fileID: 11420240}
    m_FromSlotName: Output
    m_ToSlotName: Input2
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11426504}
    m_ToNode: {fileID: 11420240}
    m_FromSlotName: Value
    m_ToSlotName: Input1
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11420240}
    m_ToNode: {fileID: 11465974}
    m_FromSlotName: Output
    m_ToSlotName: Input1
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11465480}
    m_ToNode: {fileID: 11465974}
    m_FromSlotName: Value
    m_ToSlotName: Input2
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11465974}
    m_ToNode: {fileID: 11463844}
    m_FromSlotName: Output
    m_ToSlotName: Input1
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11478436}
    m_ToNode: {fileID: 11415036}
    m_FromSlotName: Color
    m_ToSlotName: Albedo
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11411426}
    m_ToNode: {fileID: 11415036}
    m_FromSlotName: Value
    m_ToSlotName: Metallic
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11444260}
    m_ToNode: {fileID: 11415036}
    m_FromSlotName: Value
    m_ToSlotName: Smoothness
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11473952}
    m_ToNode: {fileID: 11463844}
    m_FromSlotName: Color
    m_ToSlotName: Input2
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11486492}
    m_ToNode: {fileID: 11409428}
    m_FromSlotName: UV
    m_ToSlotName: Input1
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11409428}
    m_ToNode: {fileID: 11423928}
    m_FromSlotName: Output
    m_ToSlotName: UV
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11423928}
    m_ToNode: {fileID: 11405458}
    m_FromSlotName: RGBA
    m_ToSlotName: Input2
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11463844}
    m_ToNode: {fileID: 11405458}
    m_FromSlotName: Output
    m_ToSlotName: Input1
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11405458}
    m_ToNode: {fileID: 11415036}
    m_FromSlotName: Output
    m_ToSlotName: Emission
    color: {r: 1, g: 1, b: 1, a: 1}
  - m_FromNode: {fileID: 11483632}
    m_ToNode: {fileID: 11409428}
    m_FromSlotName: Time.y
    m_ToSlotName: Input2
    color: {r: 1, g: 1, b: 1, a: 1}
  m_InvalidEdges: []
--- !u!114 &11444260
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 87c4299b09d95d64c99884296038ceeb, type: 3}
  m_Name: V1Node
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Value
    m_Name: Value
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 158.4099
    y: 518.035
    width: 237.71242
    height: -224.47949
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Value
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Value
      m_Node: {fileID: 11444260}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Value: 0.8
--- !u!114 &11452788
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: f80af444cd4235c419b356216d784b57, type: 3}
  m_Name: Sin Time
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Sin Time
    m_Name: SinTime
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -297.8777
    y: 601.5555
    width: 180
    height: 156
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: SinTime
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: SinTime
      m_Node: {fileID: 11452788}
  m_PrecisionNames:
  - half
--- !u!114 &11463548
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 30cf94a5e32cd254eb6eadf45e5cdfe3, type: 3}
  m_Name: View Direction
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: View Direction
    m_Name: ViewDirection
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -2142.4158
    y: -518.4168
    width: 1634.5381
    height: 842.9719
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: ViewDirection
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: ViewDirection
      m_Node: {fileID: 11463548}
  m_PrecisionNames:
  - half
--- !u!114 &11463844
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 088fb5bde3ece0f4190136b3ab43f7c4, type: 3}
  m_Name: MultiplyNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -881.1771
    y: -138.31287
    width: 1182.2994
    height: 595.86835
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11463844}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11463844}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11463844}
  m_PrecisionNames:
  - half
--- !u!114 &11464382
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: cab057dbd683f5244aed9bd721e1973e, type: 3}
  m_Name: 
  m_EditorClassIdentifier: 
  m_ShaderProperties: []
  previewState: 0
--- !u!114 &11465480
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 87c4299b09d95d64c99884296038ceeb, type: 3}
  m_Name: V1Node
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Value
    m_Name: Value
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1531.0605
    y: -218.19612
    width: 1267.1829
    height: 738.7516
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Value
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Value
      m_Node: {fileID: 11465480}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Value: 1.29
--- !u!114 &11465974
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: b2957c4e08e061444a7444a1a03fb584, type: 3}
  m_Name: PowerNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1230.177
    y: -301.31284
    width: 1460.2996
    height: 303.86832
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11465974}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11465974}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11465974}
  m_PrecisionNames:
  - half
--- !u!114 &11470860
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 325c0e24c20746345a5f90dc201973f8, type: 3}
  m_Name: ColorNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Color
    m_Name: Color
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 8
    y: 69
    width: 542
    height: 47
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: 
    value:
      m_DefaultVector: {x: 0, y: 0, z: 0, w: 0}
      m_SlotName: 
      m_Node: {fileID: 0}
  - slotName: Color
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Color
      m_Node: {fileID: 11470860}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Color: {r: 0.19108549, g: 0.22825164, b: 0.27943012, a: 0.10980392}
--- !u!114 &11473952
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 325c0e24c20746345a5f90dc201973f8, type: 3}
  m_Name: ColorNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Color
    m_Name: Color
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1226.9664
    y: -12.984131
    width: 1282.0889
    height: 780.5397
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Color
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Color
      m_Node: {fileID: 11473952}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Color: {r: 0.47042605, g: 0.8308824, b: 0.5027428, a: 0}
--- !u!114 &11474490
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 325c0e24c20746345a5f90dc201973f8, type: 3}
  m_Name: ColorNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Color
    m_Name: Color
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -457.87775
    y: 635.5555
    width: 318
    height: 55
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Color
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Color
      m_Node: {fileID: 11474490}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Color: {r: 0, g: 0.33793116, b: 1, a: 0}
--- !u!114 &11475404
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 5defdf1d05185a343bfebb2cdd827bd6, type: 3}
  m_Name: Texture
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: UV
    m_Name: UV
    m_DataTypeString: 
  - type: 1
    m_Title: RGBA
    m_Name: RGBA
    m_DataTypeString: 
  - type: 1
    m_Title: R
    m_Name: R
    m_DataTypeString: 
  - type: 1
    m_Title: G
    m_Name: G
    m_DataTypeString: 
  - type: 1
    m_Title: B
    m_Name: B
    m_DataTypeString: 
  - type: 1
    m_Title: A
    m_Name: A
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -214
    y: -368
    width: 607
    height: 267
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: RGBA
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: RGBA
      m_Node: {fileID: 11475404}
  - slotName: R
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: R
      m_Node: {fileID: 11475404}
  - slotName: G
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: G
      m_Node: {fileID: 11475404}
  - slotName: B
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: B
      m_Node: {fileID: 11475404}
  - slotName: A
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: A
      m_Node: {fileID: 11475404}
  - slotName: UV
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: UV
      m_Node: {fileID: 11475404}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_DefaultTexture: {fileID: 2800000, guid: bd14517bc92dec64d9a79e8e95bc8e2a, type: 3}
  m_TextureType: 0
--- !u!114 &11478436
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 325c0e24c20746345a5f90dc201973f8, type: 3}
  m_Name: ColorNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Color
    m_Name: Color
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: 396.5246
    y: 56.50999
    width: -388.40228
    height: -334.9545
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Color
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Color
      m_Node: {fileID: 11478436}
  m_PrecisionNames:
  - half
  m_BoundProperty: {fileID: 0}
  m_Color: {r: 0.309, g: 0, b: 0, a: 0}
--- !u!114 &11478450
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 97e1d998eea5d644095671979ecf2e54, type: 3}
  m_Name: DotNode
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 0
    m_Title: Input 1
    m_Name: Input1
    m_DataTypeString: 
  - type: 0
    m_Title: Input 2
    m_Name: Input2
    m_DataTypeString: 
  - type: 1
    m_Title: Output
    m_Name: Output
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1838.177
    y: -539.31287
    width: 1376.2993
    height: 572.86835
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Input1
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input1
      m_Node: {fileID: 11478450}
  - slotName: Input2
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Input2
      m_Node: {fileID: 11478450}
  - slotName: Output
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Output
      m_Node: {fileID: 11478450}
  m_PrecisionNames:
  - half
--- !u!114 &11483632
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: a4ad33d64aec32840b61126b0fbb17e1, type: 3}
  m_Name: Time
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: Time
    m_Name: Time
    m_DataTypeString: 
  - type: 1
    m_Title: Time.x
    m_Name: Time.x
    m_DataTypeString: 
  - type: 1
    m_Title: Time.y
    m_Name: Time.y
    m_DataTypeString: 
  - type: 1
    m_Title: Time.z
    m_Name: Time.z
    m_DataTypeString: 
  - type: 1
    m_Title: Time.w
    m_Name: Time.w
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1222.4044
    y: 448.83087
    width: -31
    height: 72
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: Time
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Time
      m_Node: {fileID: 11483632}
  - slotName: Time.x
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Time.x
      m_Node: {fileID: 11483632}
  - slotName: Time.y
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Time.y
      m_Node: {fileID: 11483632}
  - slotName: Time.z
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Time.z
      m_Node: {fileID: 11483632}
  - slotName: Time.w
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: Time.w
      m_Node: {fileID: 11483632}
  m_PrecisionNames:
  - half
--- !u!114 &11486492
MonoBehaviour:
  m_ObjectHideFlags: 1
  m_PrefabParentObject: {fileID: 0}
  m_PrefabInternal: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 1c05002dbfc8cd14cb3b544630cf1017, type: 3}
  m_Name: UV
  m_EditorClassIdentifier: 
  m_Slots:
  - type: 1
    m_Title: UV
    m_Name: UV
    m_DataTypeString: 
  m_Properties: []
  m_GenericTypeString: 
  color: 0
  style: node
  position:
    serializedVersion: 2
    x: -1223.4045
    y: 197.83087
    width: 241.00006
    height: 122
  showEmptySlots: 1
  m_SlotDefaultValues:
  - slotName: UV
    value:
      m_DefaultVector: {x: 1, y: 1, z: 1, w: 1}
      m_SlotName: UV
      m_Node: {fileID: 11486492}
  m_PrecisionNames:
  - half
